/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

package org.openoffice.extensions.config;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.image.ImageObserver;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileSystemView;
import org.openide.filesystems.FileUtil;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openoffice.extensions.config.office.OpenOfficeLocation;
import org.openoffice.extensions.config.office.PlatformInfo;

final class ConfigurationPanel extends javax.swing.JPanel {
    
    protected static final boolean VALIDATE_SDK = Boolean.TRUE;
    protected static final boolean VALIDATE_OFFICE = Boolean.FALSE;
    
    //private final ConfigurationOptionsPanelController controller;
    
//    ConfigurationPanel(ConfigurationOptionsPanelController controller) {
//        this.controller = controller;
//        initComponents();
//        // TODO listen to changes in form fields and call controller.changed()
//    }
    ConfigurationPanel(String officeInstallation, String sdkInstallation) {
        initComponents();
        officeTextField.setText(officeInstallation);
        sdkTextField.setText(sdkInstallation);
        
        boolean threeLayerOffice = OpenOfficeLocation.isThreeLayerOffice(officeInstallation);
        sdkTextField.setEnabled(!threeLayerOffice);
        browseButtonSDK.setEnabled(!threeLayerOffice);
        
        // initial error message
        validate();
        
        officeTextField.getDocument().addDocumentListener(new DocumentListenerImplementation(VALIDATE_OFFICE));
        sdkTextField.getDocument().addDocumentListener(new DocumentListenerImplementation(VALIDATE_SDK));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingsPanel = new javax.swing.JPanel();
        officeLabel = new javax.swing.JLabel();
        sdkLabel = new javax.swing.JLabel();
        officeTextField = new javax.swing.JTextField();
        sdkTextField = new javax.swing.JTextField();
        browseButtonOffice = new javax.swing.JButton();
        browseButtonSDK = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        errorTextPane = new javax.swing.JTextPane();
        descriptionTextPane = new javax.swing.JTextPane();
        sunLabel = new javax.swing.JLabel();
        sunLogoPanel = new SunLogoPanel();
        jTextPane1 = new javax.swing.JTextPane();

        settingsPanel.setBackground(new java.awt.Color(255, 255, 255));
        settingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, NbBundle.getMessage(ConfigurationPanel.class, "ConfigurationPanel_Title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 0))); // NOI18N
        settingsPanel.setOpaque(false);

        officeLabel.setLabelFor(officeTextField);
        org.openide.awt.Mnemonics.setLocalizedText(officeLabel, NbBundle.getMessage(ConfigurationPanel.class, "LB_OfficeInstallation")); // NOI18N

        sdkLabel.setLabelFor(sdkTextField);
        org.openide.awt.Mnemonics.setLocalizedText(sdkLabel, NbBundle.getMessage(ConfigurationPanel.class, "LB_SDKInstallation")); // NOI18N

        officeTextField.setToolTipText(NbBundle.getMessage(ConfigurationPanel.class, "TF_OfficeInstallation_Tooltip")); // NOI18N

        sdkTextField.setToolTipText(NbBundle.getMessage(ConfigurationPanel.class, "TF_SDKInstallation_Tooltip")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButtonOffice, NbBundle.getMessage(ConfigurationPanel.class, "LBL_BUTTON_BrowseOffice")); // NOI18N
        browseButtonOffice.setToolTipText(NbBundle.getMessage(ConfigurationPanel.class, "BUTTON_Office_Browse")); // NOI18N
        browseButtonOffice.setActionCommand("BROWSE_OFFICE");
        browseButtonOffice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonOfficeActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(browseButtonSDK, NbBundle.getMessage(ConfigurationPanel.class, "LBL_BUTTON_BrowseSDK")); // NOI18N
        browseButtonSDK.setToolTipText(NbBundle.getMessage(ConfigurationPanel.class, "BUTTON_SDK_Browse")); // NOI18N
        browseButtonSDK.setActionCommand("BROWSE_SDK");
        browseButtonSDK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonSDKActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(null);
        jScrollPane1.setOpaque(false);

        errorTextPane.setBackground(new java.awt.Color(238, 238, 238));
        errorTextPane.setForeground(new java.awt.Color(255, 51, 51));
        errorTextPane.setAutoscrolls(false);
        errorTextPane.setFocusable(false);
        errorTextPane.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(errorTextPane);

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(officeLabel)
                            .addComponent(sdkLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(sdkTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseButtonSDK))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                                .addComponent(officeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseButtonOffice)))))
                .addContainerGap())
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseButtonOffice)
                    .addComponent(officeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(officeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseButtonSDK)
                    .addComponent(sdkLabel)
                    .addComponent(sdkTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        descriptionTextPane.setBorder(null);
        descriptionTextPane.setEditable(false);
        descriptionTextPane.setText(NbBundle.getMessage(ConfigurationPanel.class, "TP_InitialSettings_Description")); // NOI18N
        descriptionTextPane.setAutoscrolls(false);
        descriptionTextPane.setOpaque(false);
        descriptionTextPane.setRequestFocusEnabled(false);
        descriptionTextPane.setVerifyInputWhenFocusTarget(false);

        org.openide.awt.Mnemonics.setLocalizedText(sunLabel, NbBundle.getMessage(ConfigurationPanel.class, "TP_InitialSettings_SunDevelopment")); // NOI18N

        sunLogoPanel.setOpaque(false);

        javax.swing.GroupLayout sunLogoPanelLayout = new javax.swing.GroupLayout(sunLogoPanel);
        sunLogoPanel.setLayout(sunLogoPanelLayout);
        sunLogoPanelLayout.setHorizontalGroup(
            sunLogoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 108, Short.MAX_VALUE)
        );
        sunLogoPanelLayout.setVerticalGroup(
            sunLogoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );

        jTextPane1.setEditable(false);
        jTextPane1.setText(NbBundle.getMessage(ConfigurationPanel.class, "TP_LegalNotice")); // NOI18N
        jTextPane1.setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                            .addComponent(descriptionTextPane, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                            .addComponent(sunLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 487, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sunLogoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sunLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(descriptionTextPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sunLogoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonSDKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonSDKActionPerformed
        browseInstallationDirectory(evt.getActionCommand());
    }//GEN-LAST:event_browseButtonSDKActionPerformed

    private void browseButtonOfficeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonOfficeActionPerformed
        browseInstallationDirectory(evt.getActionCommand());
    }//GEN-LAST:event_browseButtonOfficeActionPerformed

    private void browseInstallationDirectory(String command) {
        String dialogTitle = NbBundle.getMessage(ConfigurationPanel.class, "Browse_OfficeInstallation_Title"); // NOI18N
        if ("BROWSE_SDK".equals(command)) { // NOI18N
            dialogTitle = NbBundle.getMessage(ConfigurationPanel.class, "Browse_SDKInstallation_Title"); // NOI18N
        }        
        
        JFileChooser chooser = new JFileChooser(FileSystemView.getFileSystemView());
        FileUtil.preventFileChooserSymlinkTraversal(chooser, null);

        if ("BROWSE_SDK".equals(command) || !PlatformInfo.isMacOS()) { // NOI18N
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        }
        
        chooser.setDialogTitle(dialogTitle);

        String path = this.officeTextField.getText();
        if (path.length() > 0) {
            File f = new File(path);
            if (f.exists()) {
                chooser.setSelectedFile(f);
            }
        }
        if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
            File projectDir = chooser.getSelectedFile();
            if ("BROWSE_SDK".equals(command)) { // NOI18N
                sdkTextField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
            } 
            else {
                officeTextField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
            }
        }
    }
    
    public String getOffice() {
        return officeTextField.getText();
    }

    public void setOffice(String officeInstallation) {
        officeTextField.setText(officeInstallation);
    }    

    public String getSDK() {
        return sdkTextField.getText();
    }

    public void setSDK(String sdkInstallation) {
        sdkTextField.setText(sdkInstallation);
    }    
    
    void load() {
        // TODO read settings and initialize GUI
        // Example:
        // someCheckBox.setSelected(Preferences.userNodeForPackage(ConfigurationPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
    }
    
    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(ConfigurationPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
    }
    
    boolean valid() {
        // TODO check whether form is consistent and complete                
        return (OpenOfficeLocation.validateOffice(officeTextField.getText()) 
                && OpenOfficeLocation.validateSDK(sdkTextField.getText()));
    }

    public void validateWithFocus() {
        validate();
        if (errorTextPane.getText().length() != 0) {
            sdkTextField.requestFocus();
        }
    }

    @Override
    public void validate() {
        // cascade validation: first platform, then office, then sdk
        validatePlatform();
        if (errorTextPane.getText().length() == 0) {
            // Never change this into validating the sdk before office:
            // will produce problems with 3layer office
            validateOffice();
            if (errorTextPane.getText().length() == 0) {
                validateSDK();
            }
        }
    }

    protected void validate(boolean val) {
        if (val == VALIDATE_SDK) {
            validateSDK();
        }
        else {
            validateOffice();
        }
    }
    
    private void validateOffice() {
        String officePath = officeTextField.getText();
        
        boolean threeLayerOffice = OpenOfficeLocation.isThreeLayerOffice(officePath);
        sdkTextField.setEnabled(!threeLayerOffice);
        browseButtonSDK.setEnabled(!threeLayerOffice);
        // TODO: make error message for SDK not found with OOo 3
        if( !OpenOfficeLocation.validateOffice(officePath) ) {
            errorTextPane.setText(NbBundle.getMessage(ConfigurationPanel.class, "Error_OfficeInstallation")); // NOI18N
        } else {
            String sdk = OpenOfficeLocation.getSdk(officePath);
            if (sdk != null && sdk.length() != 0) {
                sdkTextField.setText(sdk);
                errorTextPane.setText(""); // NOI18N
            }
            else {
                validateSDK();
            }
        }                
    }
    
    private void validateSDK() {
        if( !OpenOfficeLocation.validateSDK(sdkTextField.getText()) ) {
            errorTextPane.setText(NbBundle.getMessage(ConfigurationPanel.class, "Error_SDKInstallation")); // NOI18N
        } else {
            errorTextPane.setText(""); // NOI18N
        }                
    }

    private void validatePlatform() {
        if( !ConfigurationValidator.validatePlatform() ) {
            errorTextPane.setText(NbBundle.getMessage(ConfigurationPanel.class, "Error_UnknownPlatform")); // NOI18N
        } else {
            errorTextPane.setText(""); // NOI18N
        }                
    }
    
//    public void removeUpdate(DocumentEvent e) {
//        validate(e);
//    }
//
//    public void insertUpdate(DocumentEvent e) {
//        validate(e);
//    }
//
//    public void changedUpdate(DocumentEvent e) {
//        validate(e);
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButtonOffice;
    private javax.swing.JButton browseButtonSDK;
    private javax.swing.JTextPane descriptionTextPane;
    private javax.swing.JTextPane errorTextPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel officeLabel;
    private javax.swing.JTextField officeTextField;
    private javax.swing.JLabel sdkLabel;
    private javax.swing.JTextField sdkTextField;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JLabel sunLabel;
    private javax.swing.JPanel sunLogoPanel;
    // End of variables declaration//GEN-END:variables
 
    private class SunLogoPanel extends JPanel {
        @Override
        protected void paintComponent(Graphics gfx) {
            // Image img = ImageUtilities.loadImage("org/openoffice/extensions/config/sun_logo.png");  // NOI18N
            Image img = ImageUtilities.loadImage("org/openoffice/extensions/config/feather.png");  // NOI18N
            ImageObserver ob = new ImageObserver() {
               public boolean imageUpdate(Image i, int infoflags,  int x, int y, int width, int height) {
                   return false;
               }
            };
            Rectangle resize = calculateSize(img, this.getPreferredSize(), ob);
            gfx.drawImage(img, resize.x, resize.y, resize.width, resize.height, ob);        
        }
        

        private Rectangle calculateSize(Image img, Dimension d, ImageObserver ob) {
            int imageWidth = img.getWidth(ob);
            int imageHeight = img.getHeight(ob);
            Rectangle resized = new Rectangle(imageWidth, imageHeight);
            // only resize when logo has to be smaller
            if (d.width < imageWidth || d.height < imageHeight) { 
                double scale = (double)imageWidth / (double)imageHeight;
                
                if (d.height * scale > d.width) {
                    // have to scale the height
                    int height = (int)(scale * resized.width);
                    resized.setSize(d.width, height);
                }
                else {
                    // have to scale the width
                    int width = (int)(scale * resized.height);
                    resized.setSize(width, d.height);
                }
            }
            return resized;
        }
    }
    
    private class DocumentListenerImplementation implements DocumentListener {
        boolean validationType;
        public DocumentListenerImplementation(boolean validationType) {
            this.validationType = validationType;
        }
        public void insertUpdate(DocumentEvent e) {
            ConfigurationPanel.this.validate(validationType);
        }

        public void removeUpdate(DocumentEvent e) {
            ConfigurationPanel.this.validate(validationType);
        }

        public void changedUpdate(DocumentEvent e) {
            ConfigurationPanel.this.validate(validationType);
        }
        
    }
}
