/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

package org.openoffice.extensions.projecttemplates.component.dialogs;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.MissingResourceException;
import javax.swing.tree.TreeSelectionModel;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.propertysheet.PropertySheet;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openoffice.extensions.projecttemplates.component.*;
import org.openoffice.extensions.projecttemplates.component.datamodel.types.node.IdlTypeTreeCreator;
import org.openoffice.extensions.util.LogWriter;
import org.openoffice.extensions.util.datamodel.NbNodeObject;
import org.openoffice.extensions.util.datamodel.Service;
import org.openoffice.extensions.util.datamodel.properties.UnknownOpenOfficeOrgPropertyException;

/**
 *
 * @author  sg128468
 */
public class ServiceDataTypePanel extends javax.swing.JPanel 
        implements ExplorerManager.Provider, PropertyChangeListener {
    
    private ExplorerManager manager = new ExplorerManager();
    private PropertySheet propSheet;

    private Lookup lookup;
    private ChangeEventPanel panel;
    private ValidateDataType dialog;
    private Node node;
    // all actions that can be done here
    private ComponentActions actions;
    private String oldName; 
    private boolean edit;
    
    /**
     * Creates new form InterfaceDataTypeDialog
     */
public ServiceDataTypePanel(ValidateDataType dialog, DialogProperties props) {

        initComponents();
        this.edit = props.getBooleanProperty(props.EDIT);
        this.panel = (ChangeEventPanel)props.getProperty(props.PANEL);
        this.actions = new ComponentActions(manager, panel);
        this.dialog = dialog;
        
        if (edit) {
            node = (Node)props.getProperty(props.NODE);
            NbNodeObject ob = (NbNodeObject)node.getLookup().lookup(NbNodeObject.class);
            oldName = ob.getDisplayName();
        }
        else {
            node = (Node)IdlTypeTreeCreator.createInitialServiceTree(
                    props.getStringProperty(props.SRV), props.getStringProperty(props.PKG));
        }
        manager.setRootContext(node);
        
        manager.addPropertyChangeListener(this);
        
        propSheet = (PropertySheet)jPanel1;
        propSheet.setNodes(new Node[]{node});

        BeanTreeView componentView = (BeanTreeView)jScrollPane1;
        componentView.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new PropertySheet();
        jScrollPane1 = new BeanTreeView();

        jSplitPane1.setDividerLocation(200);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSplitPane1.setRightComponent(jPanel1);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSplitPane1.setLeftComponent(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public ExplorerManager getExplorerManager() {
        return this.manager;
    }

    public Lookup getLookup() {
        return this.lookup;
    }
    
    public void propertyChange(PropertyChangeEvent evt) {
        Node[] selectedNodes = manager.getSelectedNodes();
        if (selectedNodes != null && selectedNodes.length == 1) {
            propSheet.setNodes(selectedNodes);
        }
        valid();
//        panel.fireChangeEvent(); // Notify that the panel changed
    }

    private void valid() {
        NbNodeObject ob = (NbNodeObject)node.getLookup().lookup(NbNodeObject.class);
        Service srv = (Service)ob;
        try {
            if (srv.getSimpleProperty(srv.PROPERTY_CONTAINER_NAME).length() == 0 ||
                srv.getSimpleProperty(srv.PROPERTY_CONTAINER_PACKAGE).length() == 0) {
                dialog.setEnableError(true, 
                    NbBundle.getMessage(NewDataTypeBasePanel.class, "LBL_Error_Name"));
                return;
            }
            else if (srv.getSimpleProperty(srv.PROPERTY_CONTAINER_INTERFACE).length() == 0) {
                dialog.setEnableError(true, 
                    NbBundle.getMessage(NewDataTypeBasePanel.class, "LBL_Error_Interface"));
                return;
            }
        } catch (MissingResourceException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        } catch (UnknownOpenOfficeOrgPropertyException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }
        dialog.setEnableError(false, null);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables

}
