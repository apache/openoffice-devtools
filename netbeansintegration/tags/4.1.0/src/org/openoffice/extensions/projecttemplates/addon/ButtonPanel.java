/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

package org.openoffice.extensions.projecttemplates.addon;

import java.awt.Color;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.SwingConstants;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openoffice.extensions.projecttemplates.addon.datamodel.Command;
import org.openoffice.extensions.projecttemplates.addon.datamodel.SeparatorElement;
import org.openoffice.extensions.projecttemplates.addon.datamodel.node.AddOnNode;
import org.openoffice.extensions.util.LogWriter;
import org.openoffice.extensions.util.datamodel.NbNodeObject;
import org.openoffice.extensions.util.datamodel.properties.UnknownOpenOfficeOrgPropertyException;

/**
 * Panel for showing toolbar that is created for OpenOffice.
 */
public class ButtonPanel extends javax.swing.JPanel {

    private static final String SEPARATOR_ICON = 
            "org/openoffice/extensions/projecttemplates/addon/icons/separator.gif";  // NOI18N

    // manager for nodes
    private ExplorerManager manager;
    // toolbar entries are shown as buttons
    private JButton[] buttons;

    private AddOnPanelVisual4Toolbar panel;

    /** Creates new form ButtonPanel */
    public ButtonPanel(AddOnPanelVisual4Toolbar panel) {
        initComponents();
        this.panel = panel;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    public void setManager(ExplorerManager manager) throws UnknownOpenOfficeOrgPropertyException {
        this.manager = manager;
        buildNewList();
    }

    public void buildNewList() throws UnknownOpenOfficeOrgPropertyException {
        this.removeAll();
        Node rootNode = manager.getRootContext();
        Node[] nodes = rootNode.getChildren().getNodes();
        buttons = new JButton[nodes.length];
        int separatorCounter = 0;
        
        for (int i = 0; i < nodes.length; i++) {
            AddOnNode node = (AddOnNode)nodes[i];
            NbNodeObject object = (NbNodeObject)node.getLookup().lookup(NbNodeObject.class);

            if (object.getType() == NbNodeObject.FUNCTION_TYPE) {
                Command com = (Command)object;

                Image image = node.getIcon(com.getType());
                ImageIcon icon = new ImageIcon(image.getScaledInstance(24, 24, Image.SCALE_FAST));

                buttons[i] = new JButton(com.getDisplayName(), icon);
                String actionCommand = com.getSimpleProperty(Command.PROPERTY_CONTAINER_NAME);
                buttons[i].setActionCommand(actionCommand);
            }
            else if(object.getType() == NbNodeObject.UI_SEPARATOR_TYPE) {
                SeparatorElement sep = (SeparatorElement)object;
                Image image = ImageUtilities.loadImage(SEPARATOR_ICON);
                ImageIcon icon = new ImageIcon(image);
                buttons[i] = new JButton(" ", icon); // NOI18N
                String name = "Sep".concat(new Integer(separatorCounter++).toString()); // NOI18N
                sep.setName(name);
                buttons[i].setActionCommand(name);
            }
            else {
                LogWriter.getLogWriter().log(LogWriter.LEVEL_CRITICAL, 
                        "Unknown type for button panel."); // NOI18N
                // prevent NullPointer exception
                buttons[i] = new JButton("unknown"); // NOI18N
            }
            buttons[i].setBackground(new Color(238, 238, 238));
            buttons[i].setHorizontalTextPosition(SwingConstants.CENTER);
            buttons[i].setVerticalTextPosition(SwingConstants.BOTTOM);
            buttons[i].addActionListener(panel);
            this.add(buttons[i]);
        }
        this.updateUI();
    }
    
    public void setSelectedButton(int buttonID) {
        if (buttonID >= 0 || buttonID < buttons.length) { 
            buttons[buttonID].setSelected(true);
        }
    }
}
