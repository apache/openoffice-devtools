/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

package org.openoffice.extensions.projecttemplates.addon.dialogs;

import java.awt.Component;
import java.awt.Dialog;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Enumeration;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JTree;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreeSelectionModel;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openoffice.extensions.projecttemplates.addon.AddOnActions;
import org.openoffice.extensions.projecttemplates.addon.AddOnWizardIterator;
import org.openoffice.extensions.projecttemplates.addon.datamodel.Command;
import org.openoffice.extensions.util.datamodel.NbNodeObject;
import org.openoffice.extensions.util.datamodel.properties.OpenOfficeOrgIconProperty;

/**
 * Dialog for re-adding previously deleted commands to a toolbar or menu.
 */
public class AddDeletedCommandPanel extends javax.swing.JPanel 
        implements ActionListener {

    private DialogDescriptor dialogDescriptor;
    private Vector<Command> commands;
    private AddOnActions actions;
    private NbNodeObject selectedObject;
    
    private static final String HELP_CTX_STRING = 
            "org.openoffice.extensions.addon.deleted.command"; // NOI18N

    /** Creates new form AddDeletedCommandPanel */
    public AddDeletedCommandPanel(AddOnActions actions) {
        this.actions = actions;
        this.commands = actions.getDeletedCommands();
        
        initComponents();
        jTree1.getSelectionModel().setSelectionMode(
                TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTree1.setSelectionRow(0);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        jTree1.setCellRenderer(getTreeCellRenderer());
        jTree1.setModel(getTreeModel());
        jTree1.setName("listOfDeletedCommands");
        jTree1.setRootVisible(false);
        jScrollPane1.setViewportView(jTree1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public static synchronized void start(final AddOnActions actions) {
        // get the title
        String title = NbBundle.getMessage(
                    AddOnWizardIterator.class, "LBL_Title_AddDelCommand"); // NOI18N

        AddDeletedCommandPanel basePanel = new AddDeletedCommandPanel(actions);
        DialogDescriptor ddsc = new DialogDescriptor(basePanel, title);
        basePanel.addDialogDescriptor(ddsc);
        Dialog d = DialogDisplayer.getDefault().createDialog(ddsc);
        d.setVisible(true);
    }

    private void addDialogDescriptor(DialogDescriptor ddsc) {
        this.dialogDescriptor = ddsc;
        dialogDescriptor.setHelpCtx(new HelpCtx(HELP_CTX_STRING));  
        dialogDescriptor.setButtonListener(this);
        if(commands.size() == 0)
            dialogDescriptor.setValid(false); // set ok button invalid
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent actionEvent) {
        if (actionEvent.getActionCommand().equals("OK")) { // NOI18N
            int[] selectedRows = jTree1.getSelectionRows();
            if (selectedRows != null && selectedRows.length > 0) {
                Command com = commands.get(selectedRows[0]);
                this.actions.restoreCommand(com);
            }
        }
    }
    
    private TreeModel getTreeModel() {
        return new MyTreeModel(new MyTreeNode(null, -1));

    }
    
    private TreeCellRenderer getTreeCellRenderer() {
        return new MyRenderer();
    }

    class MyTreeModel extends DefaultTreeModel {
        public MyTreeModel(TreeNode root) {
            super(root, true);
        }
    }
    
    class MyTreeNode implements TreeNode {
        TreeNode parent;
        int index;
        public MyTreeNode(TreeNode parent, int index) {
            this.parent = parent;
            this.index = index;
        }
        public TreeNode getChildAt(int i) {
            return parent==null?new MyTreeNode(this, i):null;
        }
        public int getChildCount() {
            if (parent == null) {
                if (commands.size() > 0)
                    return commands.size();
                else
                    return 1;
            }
            return 0;
        }
        public TreeNode getParent() {
            return parent;
        }
        public int getIndex(TreeNode treeNode) {
            if (treeNode != null)
                return treeNode.getIndex(null);
            return index;
        }
        public boolean getAllowsChildren() {
            return parent==null?true:false;
        }
        public boolean isLeaf() {
            return parent==null?false:true;
        }
        public Enumeration children() {
            Vector<TreeNode>children = new Vector<TreeNode>();
            int count = getChildCount();
            for (int i = 0; i < count; i++) {
                children.add(getChildAt(i));
            }
            return children.elements();
        }
    }
    
    class MyRenderer extends DefaultTreeCellRenderer {
        public Component getTreeCellRendererComponent(
                            JTree tree, Object value, boolean sel, boolean expanded,
                            boolean leaf, int row, boolean hasFocus) {

            super.getTreeCellRendererComponent(tree, value, sel, expanded, 
                    leaf, row, hasFocus);
            if (commands.size() != 0) {
                if (row < commands.size()) {
                    Command com = commands.elementAt(row);
                    String name = com.getDisplayName();
                    Image img = getImage(com);
                    if (img != null) {
                        ImageIcon icon = new ImageIcon(img.getScaledInstance(24, 24, Image.SCALE_FAST));
                        setIcon(icon);
                    }
                    setText(name);
                }
            }
            else {
                setText(NbBundle.getMessage(AddOnWizardIterator.class, 
                        "LBL_Title_NoCommandDeleted")); // NOI18N
            }
            return this;
        }
    }
    
    private Image getImage(Command com) {
        if (com != null) {
            int[] propIndexes = new int[]{
                com.PROPERTY_Icon_Hires_Big,
                com.PROPERTY_Icon_Hires_Small,
                com.PROPERTY_Icon_Lowres_Big,
                com.PROPERTY_Icon_Lowres_Small,
            };
            for (int i = 0; i < propIndexes.length; i++) {
                OpenOfficeOrgIconProperty prop = (OpenOfficeOrgIconProperty)com.getProperty(propIndexes[i]);
                if (prop != null && prop.getImage() != null) {
                    return prop.getImage();
                }
            }
        }
        return null;
    }
}
