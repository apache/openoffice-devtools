/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/
package org.openoffice.extensions.projecttemplates.addon;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle;
import org.openoffice.extensions.config.ConfigurationSettings;

public class AddOnPanelVisual1Project extends JPanel implements DocumentListener {
    
    public static final String PROP_PROJECT_NAME = "AddOn"; // NOI18N
    
    private AddOnWizardPanel1Project panel;
    private boolean addonNameModified = false;
    
    private String[] generatedFiles = new String[]{ "", 
                                                    "src/uno-extension-manifest.xml\n",
                                                    "registry/data/org/openoffice/Office/ProtocolHandler.xcu\n", 
                                                    "registry/data/org/openoffice/Office/Addons.xcu\n" }; // NOI18N
    
    /** Creates new form PanelProjectLocationVisual */
    public AddOnPanelVisual1Project(AddOnWizardPanel1Project panel) {
        initComponents();
        this.panel = panel;
        // Register listener on the textFields to make the automatic updates
        projectNameTextField.getDocument().addDocumentListener(this);
        projectLocationTextField.getDocument().addDocumentListener(this);
        addonNameTextField.getDocument().addDocumentListener(this);
    }
    
    
    public String getProjectName() {
        return this.projectNameTextField.getText();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectNameLabel = new javax.swing.JLabel();
        projectNameTextField = new javax.swing.JTextField();
        projectLocationLabel = new javax.swing.JLabel();
        projectLocationTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        createdFolderLabel = new javax.swing.JLabel();
        createdFolderTextField = new javax.swing.JTextField();
        classNameLabel = new javax.swing.JLabel();
        packageNameLabel = new javax.swing.JLabel();
        addonNameTextField = new javax.swing.JTextField();
        packageNameTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        createdFilesTextPane = new javax.swing.JTextPane();
        createMenuCheckBox = new javax.swing.JCheckBox();
        createToolbarCheckBox = new javax.swing.JCheckBox();

        projectNameLabel.setLabelFor(projectNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, NbBundle.getMessage(AddOnPanelVisual1Project.class, "LBL_ProjectName")); // NOI18N

        projectNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(AddOnPanelVisual1Project.class, "TF_ProjectName_Tooltip")); // NOI18N

        projectLocationLabel.setLabelFor(projectLocationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectLocationLabel, NbBundle.getMessage(AddOnPanelVisual1Project.class, "LBL_ProjectLoaction")); // NOI18N

        projectLocationTextField.setToolTipText(org.openide.util.NbBundle.getMessage(AddOnPanelVisual1Project.class, "TF_ProjectLocation_Tooltip")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, NbBundle.getMessage(AddOnPanelVisual1Project.class, "LBL_Browse")); // NOI18N
        browseButton.setToolTipText(org.openide.util.NbBundle.getMessage(AddOnPanelVisual1Project.class, "BUTTON_Browse_Tooltip")); // NOI18N
        browseButton.setActionCommand("BROWSE");
        browseButton.setName("browse"); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        createdFolderLabel.setLabelFor(createdFolderTextField);
        org.openide.awt.Mnemonics.setLocalizedText(createdFolderLabel, NbBundle.getMessage(AddOnPanelVisual1Project.class, "LBL_ProjectFolder")); // NOI18N

        createdFolderTextField.setEditable(false);
        createdFolderTextField.setToolTipText(org.openide.util.NbBundle.getMessage(AddOnPanelVisual1Project.class, "TF_ProjectFolder_Tooltip")); // NOI18N

        classNameLabel.setLabelFor(addonNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(classNameLabel, NbBundle.getMessage(AddOnPanelVisual1Project.class, "LBL_MainClassName")); // NOI18N

        packageNameLabel.setLabelFor(packageNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(packageNameLabel, NbBundle.getMessage(AddOnPanelVisual1Project.class, "LBL_JavaPackage")); // NOI18N

        addonNameTextField.setText("jTextField1");
        addonNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(AddOnPanelVisual1Project.class, "TF_MainClassName_Tooltip")); // NOI18N

        packageNameTextField.setText("jTextField2");
        packageNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(AddOnPanelVisual1Project.class, "TF_PackageName_Tooltip")); // NOI18N

        jLabel3.setLabelFor(createdFilesTextPane);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, NbBundle.getMessage(AddOnPanelVisual1Project.class, "LBL_CreatedFiles")); // NOI18N

        jScrollPane1.setBorder(null);

        createdFilesTextPane.setBorder(null);
        createdFilesTextPane.setEditable(false);
        createdFilesTextPane.setOpaque(false);
        jScrollPane1.setViewportView(createdFilesTextPane);

        createMenuCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(createMenuCheckBox, NbBundle.getMessage(AddOnPanelVisual1Project.class, "LBL_CreateMenu")); // NOI18N
        createMenuCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        createMenuCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        createMenuCheckBox.setName("createMenuStructure"); // NOI18N
        createMenuCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMenuCheckBoxActionPerformed(evt);
            }
        });

        createToolbarCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(createToolbarCheckBox, NbBundle.getMessage(AddOnPanelVisual1Project.class, "LBL_CreateToolbar")); // NOI18N
        createToolbarCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        createToolbarCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        createToolbarCheckBox.setName("createToolbarStructure"); // NOI18N
        createToolbarCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createToolbarCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(createdFolderLabel)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, packageNameLabel)
                                .add(layout.createSequentialGroup()
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, classNameLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, projectNameLabel))
                                    .add(2, 2, 2)))
                            .add(projectLocationLabel)
                            .add(jLabel3))
                        .add(22, 22, 22)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                            .add(packageNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                            .add(projectLocationTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                            .add(addonNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                            .add(projectNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                            .add(createdFolderTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                            .add(createMenuCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                            .add(createToolbarCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(browseButton)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(projectNameLabel)
                    .add(projectNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(classNameLabel)
                    .add(addonNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(packageNameLabel)
                    .add(packageNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(browseButton)
                    .add(projectLocationLabel)
                    .add(projectLocationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(8, 8, 8)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(createdFolderLabel)
                    .add(createdFolderTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(17, 17, 17)
                .add(createMenuCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(createToolbarCheckBox)
                .add(25, 25, 25)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel3)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createMenuCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMenuCheckBoxActionPerformed

        if (createMenuCheckBox.isSelected()) {
            panel.updatePanelSteps(AddOnWizardIterator.ALL_PANELS);
        }
        else {
            createToolbarCheckBox.setSelected(true);
            panel.updatePanelSteps(AddOnWizardIterator.TOOLBAR_PANEL);
        }
        
    }//GEN-LAST:event_createMenuCheckBoxActionPerformed

    private void createToolbarCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createToolbarCheckBoxActionPerformed

        if (createToolbarCheckBox.isSelected())
            panel.updatePanelSteps(AddOnWizardIterator.ALL_PANELS);
        else {
            createMenuCheckBox.setSelected(true);
            panel.updatePanelSteps(AddOnWizardIterator.MENU_PANEL);
        }

    }//GEN-LAST:event_createToolbarCheckBoxActionPerformed
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        String command = evt.getActionCommand();
        if ("BROWSE".equals(command)) { // NOI18N
            JFileChooser chooser = new JFileChooser(FileSystemView.getFileSystemView());
            FileUtil.preventFileChooserSymlinkTraversal(chooser, ConfigurationSettings.getDefaultFileChooserStartingDir());
            chooser.setDialogTitle(NbBundle.getMessage(AddOnWizardIterator.class, "LBL_FileChooserTitle"));
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            String path = this.projectLocationTextField.getText();
            if (path.length() > 0) {
                File f = new File(path);
                if (f.exists()) {
                    chooser.setSelectedFile(f);
                }
            }
            if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
                File projectDir = chooser.getSelectedFile();
                ConfigurationSettings.storeDefaultFileChooserStartingDir(projectDir);
                projectLocationTextField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
            }
            panel.fireChangeEvent();
        }
        
    }//GEN-LAST:event_browseButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addonNameTextField;
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel classNameLabel;
    private javax.swing.JCheckBox createMenuCheckBox;
    private javax.swing.JCheckBox createToolbarCheckBox;
    private javax.swing.JTextPane createdFilesTextPane;
    private javax.swing.JLabel createdFolderLabel;
    private javax.swing.JTextField createdFolderTextField;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel packageNameLabel;
    private javax.swing.JTextField packageNameTextField;
    private javax.swing.JLabel projectLocationLabel;
    private javax.swing.JTextField projectLocationTextField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JTextField projectNameTextField;
    // End of variables declaration//GEN-END:variables
    
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        projectNameTextField.requestFocus();
    }
    
    boolean valid(WizardDescriptor wizardDescriptor) {
        
        if (projectNameTextField.getText().length() == 0) {
            String message = NbBundle.getMessage(AddOnWizardIterator.class, "LBL_ErrorMessageFolder");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false; // Display name not specified
        }
        File f = FileUtil.normalizeFile(new File(projectLocationTextField.getText()).getAbsoluteFile());
        if (!f.isDirectory()) {
            String message = NbBundle.getMessage(AddOnWizardIterator.class, "LBL_ErrorMessagePath");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
        }
        final File destFolder = FileUtil.normalizeFile(new File(createdFolderTextField.getText()).getAbsoluteFile());
        
        File projLoc = destFolder;
        while (projLoc != null && !projLoc.exists()) {
            projLoc = projLoc.getParentFile();
        }
        if (projLoc == null || !projLoc.canWrite()) {
            String message = NbBundle.getMessage(AddOnWizardIterator.class, "LBL_ErrorMessageCreateFolder");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }
        
        if (FileUtil.toFileObject(projLoc) == null) {
            String message = NbBundle.getMessage(AddOnWizardIterator.class, "LBL_ErrorMessagePath");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }
        
        File[] kids = destFolder.listFiles();
        if (destFolder.exists() && kids != null && kids.length > 0) {
            // Folder exists and is not empty
            String message = NbBundle.getMessage(AddOnWizardIterator.class, "LBL_ErrorMessageFolderNotEmpty");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }
        wizardDescriptor.putProperty("WizardPanel_errorMessage", ""); // NOI18N
        return true;
    }
    
    void store(WizardDescriptor d) {
        String name = projectNameTextField.getText().trim();
        String folder = createdFolderTextField.getText().trim();
        
        try {
            d.putProperty("projdir", new File(folder)); // NOI18N
            d.putProperty("name", name); // NOI18N
            d.putProperty("ProjectDir", new File(folder).getCanonicalPath()); // NOI18N
            d.putProperty("ProjectName", name); // NOI18N
            d.putProperty("ProjectDisplayName", name); // NOI18N
        } catch (IOException e) {
            // TODO
        }
        
        String mainClass = addonNameTextField.getText().trim();
        String packageName = packageNameTextField.getText().trim();
        d.putProperty("mainClassName", mainClass); // NOI18N
        d.putProperty("mainClassNameSmall", mainClass.toLowerCase()); // NOI18N
        d.putProperty("RegistrationClass", packageName + "." + mainClass);  // NOI18N
        d.putProperty("Protocol", packageName.concat(".").concat(mainClass.toLowerCase())); // NOI18N
        d.putProperty("displayName", mainClass); // NOI18N
        d.putProperty("packageName", packageName);  // NOI18N
        d.putProperty("UnoPackage", packageName);  // NOI18N
        d.putProperty("GotMenu", createMenuCheckBox.isSelected()); // NOI18N
        d.putProperty("GotToolbar", createToolbarCheckBox.isSelected()); // NOI18N
    }
   
    private void updateCreatedFiles() {
        createdFilesTextPane.setText(generatedFiles[0] + generatedFiles[1] +
                                 generatedFiles[2] + generatedFiles[3]);
    }
    
    void read(WizardDescriptor settings) {
        File projectLocation = (File) settings.getProperty("projdir"); // NOI18N
        if (projectLocation == null || projectLocation.getParentFile() == null || 
                !projectLocation.getParentFile().isDirectory()) {
            projectLocation = ProjectChooser.getProjectsFolder();
        } else {
            projectLocation = projectLocation.getParentFile();
        }
        this.projectLocationTextField.setText(projectLocation.getAbsolutePath());

        
        String projectName = (String) settings.getProperty("name"); // NOI18N
        if(projectName == null) {
            projectName = "AddOn"; // NOI18N
            String[] fileList = projectLocation.list(new FilenameFilter() {
                public boolean accept(File dir, String name) {
                    if (name.startsWith("AddOn")) return true; // NOI18N
                    return false;
                }
            });
            boolean searchProjectName = true;
            int length = projectName.length();
            for (int i=0; searchProjectName && i<fileList.length + 1; i++) {
                switch (i) {
                    case 0: // keep project name
                        break;
                    case 1: // append 1
                        projectName = new StringBuffer(projectName).append(1).toString(); 
                        break;
                    default: // remove number and append the next one
                        projectName = new StringBuffer(projectName.substring(0, length)).append(i).toString();
                }
                // test if the name is already used
                searchProjectName = false;
                for (int j=0; !searchProjectName && j<fileList.length; j++) {
                    // if the project name isn't found, searchProjectName stays false and the name is kept
                    searchProjectName |= fileList[j].equals(projectName);
                }
            }
        }
        this.projectNameTextField.setText(projectName);
        this.projectNameTextField.selectAll();
        
        String mainclass = (String)settings.getProperty("mainClassName"); // NOI18N
        if (mainclass == null)
            mainclass = projectName;
        addonNameTextField.setText(mainclass);
        
        String packagename = (String)settings.getProperty("packageName"); // NOI18N
        if (packagename == null)
            packagename = NbBundle.getMessage(ConfigurationSettings.class, "default.package"); // NOI18N
        packageNameTextField.setText(packagename);
        
        String packagePath = "src/" + packagename.replace('.', '/') + '/'; // NOI18N
        generatedFiles[0] = packagePath + mainclass + ".java\n"; // NOI18N
        updateCreatedFiles();
    }
    
    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }
    
    // Implementation of DocumentListener --------------------------------------
    
    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME,null,this.projectNameTextField.getText());
        }
    }
    
    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME,null,this.projectNameTextField.getText());
        }
    }
    
    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME,null,this.projectNameTextField.getText());
        }
    }
    
    /** Handles changes in the Project name and project directory, */
    private void updateTexts(DocumentEvent e) {
        
        Document doc = e.getDocument();
        
        if (doc == addonNameTextField.getDocument() && addonNameTextField.getText().length()>0) {
            if (!projectNameTextField.getText().equals(addonNameTextField.getText()))
                addonNameModified = true;
        }
        
        if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument() ||
            doc == packageNameTextField.getDocument()) {
            // Change in the project name
            
            String projectName = projectNameTextField.getText();
            String projectFolder = projectLocationTextField.getText();
            
            if (!addonNameModified)
                addonNameTextField.setText(projectName);
            
            //if (projectFolder.trim().length() == 0 || projectFolder.equals(oldName)) {
            createdFolderTextField.setText(projectFolder.concat(File.separator).concat(projectName));
            //}

            String packagePath = "src/" + packageNameTextField.getText().replace('.', '/') + '/'; // NOI18N
            generatedFiles[0] = packagePath + addonNameTextField.getText() + ".java\n"; // NOI18N
            
            updateCreatedFiles();
        }
        if(doc == addonNameTextField.getDocument()) {
            String packagePath = "src/" + packageNameTextField.getText().replace('.', '/') + '/'; // NOI18N
            generatedFiles[0] = packagePath + addonNameTextField.getText() + ".java\n"; // NOI18N
            updateCreatedFiles();
        }
        
        panel.fireChangeEvent(); // Notify that the panel changed
    }
    
}
