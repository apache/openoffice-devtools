/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/
package org.openoffice.extensions.projecttemplates.calcaddin;

import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.Vector;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openoffice.extensions.util.datamodel.localization.LanguageDefinition;

/**
 *
 * @author  sg128468
 */
public class LanguageHandlingDialog extends javax.swing.JPanel implements ActionListener {

//    private boolean deleteLanguage;
    private String[] displayedLanguages;

    private int selectedLanguageID;
    
    /** Creates new form LanguageHandlingDialog */
public LanguageHandlingDialog(boolean deleteLanguage, Integer[] indexes) {
        
        selectedLanguageID = -1; 

        initLanguages(indexes, deleteLanguage);
        initComponents();
        
//        if (deleteLanguage) {  // difference between add and delete: just some captions
//            org.openide.awt.Mnemonics.setLocalizedText(actionButton, org.openide.util.NbBundle.getMessage(AddinWizardIterator.class, "LBL_BUTTON_Delete"));
//        }
//        else {
//            org.openide.awt.Mnemonics.setLocalizedText(actionButton, org.openide.util.NbBundle.getMessage(AddinWizardIterator.class, "LBL_BUTTON_Add"));
//        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(getLanguages()));

        jLabel1.setLabelFor(jComboBox1);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AddinWizardIterator.class, "LBL_Language")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static int start(final boolean deleteLanguage, final Integer[] indexes) {
        final LanguageHandlingDialog lang = new LanguageHandlingDialog(deleteLanguage, indexes);
        String title = null;
        if (deleteLanguage) {  // difference between add and delete: just some captions
            title = org.openide.util.NbBundle.getMessage(AddinWizardIterator.class, "LBL_Delete_Title");
        }
        else {
            title = org.openide.util.NbBundle.getMessage(AddinWizardIterator.class, "LBL_Add_Title");
        }

        DialogDescriptor ddscr = new DialogDescriptor(lang, title);
        ddscr.setButtonListener(lang);

        Dialog d = DialogDisplayer.getDefault().createDialog(ddscr);
        d.setVisible(true);
        
        return lang.selectedLanguageID;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private String[] getLanguages() {
        return displayedLanguages;
    }
    
    private void initLanguages(Integer[] indexes, boolean deleteLanguage) {
        if (deleteLanguage) {  
            // display selected languages for deleting
            displayedLanguages = new String[indexes.length];
            for (int i=0; i<indexes.length; i++) {
                displayedLanguages[i] = LanguageDefinition.getLanguageNameForId(indexes[i].intValue());
            }
            Arrays.sort(displayedLanguages);
        }
        else {
            // add all languages
            Vector<String> language = new Vector<String>(LanguageDefinition.LANGUAGE_COUNT);
            for (int i=0; i<LanguageDefinition.LANGUAGE_COUNT; i++) {
                language.add(i, LanguageDefinition.getLanguageNameForId(i));
            }
            // remove the ones already selected
            Arrays.sort(indexes);
            for (int i=indexes.length-1; i>=0; i--) {
                language.remove(indexes[i].intValue());
            }
            
            displayedLanguages = new String[language.size()];
            displayedLanguages = language.toArray(displayedLanguages);
            Arrays.sort(displayedLanguages);
        }
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("OK")) { // NOI18N
            int selected = jComboBox1.getSelectedIndex();
            String languageName = displayedLanguages[selected];
            selectedLanguageID = LanguageDefinition.getLanguageIdForName(languageName);
        }
        else if (e.getActionCommand().equals("Cancel")) { // NOI18N
            selectedLanguageID = -1;
        }
    }
}
