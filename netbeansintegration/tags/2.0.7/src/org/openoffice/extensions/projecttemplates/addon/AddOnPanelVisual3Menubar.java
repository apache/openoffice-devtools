/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

package org.openoffice.extensions.projecttemplates.addon;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import javax.swing.ActionMap;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.tree.TreeSelectionModel;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.propertysheet.PropertySheet;
import org.openide.explorer.view.TreeTableView;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openoffice.extensions.projecttemplates.addon.datamodel.AddOn;
import org.openoffice.extensions.projecttemplates.addon.datamodel.node.AddOnChildren;
import org.openoffice.extensions.projecttemplates.addon.datamodel.node.AddOnNode;
import org.openoffice.extensions.projecttemplates.addon.datamodel.node.AddOnTreeCreator;
import org.openoffice.extensions.projecttemplates.addon.dialogs.AddDeletedCommandPanel;
import org.openoffice.extensions.util.datamodel.PropertyContainer;
import org.openoffice.extensions.util.datamodel.localization.LanguageDefinition;
import org.openoffice.extensions.util.datamodel.properties.LocalizedOpenOfficeOrgProperty;
import org.openoffice.extensions.util.datamodel.NbNodeObject;
import org.openoffice.extensions.util.LogWriter;
import org.openoffice.extensions.util.datamodel.actions.BaseAction;

public class AddOnPanelVisual3Menubar extends JPanel implements 
        ExplorerManager.Provider, PropertyChangeListener {
    
    public static final String PROP_PROJECT_NAME = "descFirst"; // NOI18N
    
    private ExplorerManager manager = new ExplorerManager();
    private PropertySheet propSheet;
    private Lookup lookup;
    
    private AddOnActions actions;
    private AddOnWizardPanel3Menubar panel;
    
    private String[] tags;
    private NbNodeObject rootAddOn;
    
    /** Creates new form PanelProjectLocationVisual */
    public AddOnPanelVisual3Menubar(AddOnWizardPanel3Menubar panel) {
        initComponents();
        
        this.panel = panel;

        TreeTableView view = (TreeTableView)jScrollPane1;
//        view.setName("AddOn"); // NOI18N
        view.setRootVisible(false);
        view.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        
        // for keyboard actions enable this: handle actions must be done, too
        ActionMap map = getActionMap();
//        map.put("delete", ExplorerUtils.actionDelete(manager, true)); // NOI18N

        propSheet = (PropertySheet)jPanel1;
        
        actions = new AddOnActions(manager, panel);
        
        manager.addPropertyChangeListener(this);
        lookup = ExplorerUtils.createLookup(manager, map);
    }
    
    public ExplorerManager getExplorerManager() {
        return manager;
    }
   
    public Lookup getLookup() {
        return lookup;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new PropertySheet();
        jScrollPane1 = new TreeTableView();
        addMenuButton = new javax.swing.JButton();
        addSeparatorButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        removeCommandButton = new javax.swing.JButton();
        addCommandsButton = new javax.swing.JButton();
        previewComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setAutoscrolls(true);
        setRequestFocusEnabled(false);
        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setForeground(java.awt.Color.white);
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMinimumSize(new java.awt.Dimension(5, 10));
        jPanel1.setName("properties");
        jPanel1.setPreferredSize(new java.awt.Dimension(5, 10));
        jSplitPane1.setRightComponent(jPanel1);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setFocusTraversalPolicy(getFocusTraversalPolicy());
        jScrollPane1.setMinimumSize(new java.awt.Dimension(5, 10));
        jScrollPane1.setName("menuStructure");
        jScrollPane1.setPreferredSize(new java.awt.Dimension(5, 10));
        jSplitPane1.setLeftComponent(jScrollPane1);

        org.openide.awt.Mnemonics.setLocalizedText(addMenuButton, NbBundle.getMessage(AddOnPanelVisual3Menubar.class, "LBL_BUTTON_AddSubMenu"));
        addMenuButton.setToolTipText(NbBundle.getMessage(AddOnPanelVisual3Menubar.class, "BUTTON_AddSubMenu_Tooltip"));
        addMenuButton.setName("addMenu");
        addMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMenuButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addSeparatorButton, NbBundle.getMessage(AddOnPanelVisual3Menubar.class, "LBL_BUTTON_AddSeparator"));
        addSeparatorButton.setName("addSeparator");
        addSeparatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSeparatorButtonActionPerformed(evt);
            }
        });

        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/openoffice/extensions/projecttemplates/addon/icons/up.gif")));
        upButton.setToolTipText(org.openide.util.NbBundle.getMessage(AddOnPanelVisual3Menubar.class, "LBL_BUTTON_Delete"));
        upButton.setName("up");
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/openoffice/extensions/projecttemplates/addon/icons/down.gif")));
        downButton.setToolTipText(org.openide.util.NbBundle.getMessage(AddOnPanelVisual3Menubar.class, "LBL_BUTTON_Delete"));
        downButton.setName("down");
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeCommandButton, NbBundle.getMessage(AddOnPanelVisual3Menubar.class, "LBL_BUTTON_Delete"));
        removeCommandButton.setName("delete");
        removeCommandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCommandButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addCommandsButton, NbBundle.getMessage(AddOnPanelVisual3Menubar.class, "LBL_BUTTON_AddCommand"));
        addCommandsButton.setName("addCommand");
        addCommandsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommandsButtonActionPerformed(evt);
            }
        });

        previewComboBox.setModel(getPreviewModel());
        previewComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setLabelFor(previewComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, NbBundle.getMessage(AddOnPanelVisual3Menubar.class, "LBL_Preview"));
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(previewComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 350, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(addMenuButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .add(addSeparatorButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .add(addCommandsButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .add(removeCommandButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(46, 46, 46)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, downButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, upButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(76, 76, 76)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(previewComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(addMenuButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(addSeparatorButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(addCommandsButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removeCommandButton)
                        .add(50, 50, 50)
                        .add(upButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(downButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void previewComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewComboBoxActionPerformed

        int index = previewComboBox.getSelectedIndex();
        if (tags != null) {
            String context = tags[index];
            AddOnNode rootNode = new AddOnNode(rootAddOn, new AddOnChildren(context, false, false), false, false);
            manager.setRootContext(rootNode);
            selectFirstLeaf(rootNode);
        }


    }//GEN-LAST:event_previewComboBoxActionPerformed

    private void addCommandsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommandsButtonActionPerformed

        AddDeletedCommandPanel.start(actions);
        
    }//GEN-LAST:event_addCommandsButtonActionPerformed

    private void removeCommandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCommandButtonActionPerformed

        actions.toggleVisibility();

    }//GEN-LAST:event_removeCommandButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed

        actions.moveUp();

    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed

        actions.moveDown();
        
    }//GEN-LAST:event_downButtonActionPerformed

    private void addSeparatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSeparatorButtonActionPerformed

        actions.addSeparatorAction();

    }//GEN-LAST:event_addSeparatorButtonActionPerformed

    private void addMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMenuButtonActionPerformed

        actions.addMenuAction();
        
    }//GEN-LAST:event_addMenuButtonActionPerformed
        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCommandsButton;
    private javax.swing.JButton addMenuButton;
    private javax.swing.JButton addSeparatorButton;
    private javax.swing.JButton downButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JComboBox previewComboBox;
    private javax.swing.JButton removeCommandButton;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables
    
    public void addNotify() {
        super.addNotify();
        try {
            //same problem as in 31086, initial focus on Cancel button
            manager.setSelectedNodes(manager.getRootContext().getChildren().getNodes());
        } catch (PropertyVetoException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }
    }
    
    boolean valid(WizardDescriptor wizardDescriptor) {
        Node node = manager.getRootContext();
        AddOn addon = (AddOn)node.getLookup().lookup(NbNodeObject.class);
        NbNodeObject[]commands = addon.getAllCommands();
        if (commands.length == 0) {
            String message = NbBundle.getMessage(AddOnWizardIterator.class, "LBL_ErrorMessageOneCommand");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }
        wizardDescriptor.putProperty("WizardPanel_errorMessage", ""); // NOI18N
        return true;
    }
    
    void store(WizardDescriptor d) { // method may be called several times!
        Node node = manager.getRootContext();
        // first subnodes are functions
        NbNodeObject addOn = (NbNodeObject)node.getLookup().lookup(NbNodeObject.class);
        // only one menu as sub object
        d.putProperty("AddOnMenu", addOn.getAllSubObjects()[0]); // NOI18N
    }
    
    private String[][] getLocalizedProperties(LocalizedOpenOfficeOrgProperty prop, String defaultValue) {
        if (defaultValue == null) defaultValue = ""; // NOI18N
        Integer[] indexes = prop.getUsedLanguageIndexes();
        String[][] retValue = new String[2][indexes.length];
        for (int i=0; i<indexes.length; i++) {
            int languageID = indexes[i].intValue();
            String text = prop.getValueForLanguage(languageID);
            String language = LanguageDefinition.getLanguageShortNameForId(languageID);
            retValue[0][i] = language;
            if (text != null && text.length() > 0 && text.charAt(0) != '<' 
                            && text.charAt(text.length() - 1) != '>') {
                retValue[1][i] = text;
            }
            else {
                retValue[1][i] = defaultValue;
            }
        }
        return retValue;
    }
    
    void read(WizardDescriptor settings) {
        AddOn restepAddOn = (AddOn)settings.getProperty("AddOnMenu"); // NOI18N
        AddOn addOn = (AddOn)settings.getProperty("AddOn"); // NOI18N
        AddOnNode rootNode = null;
        if (restepAddOn == null) { // first creation
            rootNode = AddOnTreeCreator.createMenuStructure(addOn);
        }
        else { // restep through this panel: merge eventual changes from panel before
            rootNode = AddOnTreeCreator.restoreMenuStructure(restepAddOn, addOn);
        }
        rootAddOn = (NbNodeObject)rootNode.getLookup().lookup(NbNodeObject.class);
        manager.setRootContext(rootNode);
        // deliver the actual actions to the node-actions
        rootNode.setActions((BaseAction)actions);
        selectFirstLeaf(rootNode);
    }
    
    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }

    public void propertyChange(PropertyChangeEvent evt) {
        // because of TreeSelectionModel.SINGLE_TREE_SELECTION max. one node is selected
        Node[] selectedNodes = manager.getSelectedNodes();
        boolean disableComamnds = true;
        if (selectedNodes != null && selectedNodes.length > 0) {
            propSheet.setNodes(selectedNodes);
            Node node = selectedNodes[0].getParentNode();
            if (node != null) {  // is null after a delete
                node = node.getParentNode(); // make sure to get parent from top node
            }
            if (node != null) {
                this.removeCommandButton.setEnabled(true);
                this.upButton.setEnabled(true);
                this.downButton.setEnabled(true);
                disableComamnds = false;
            }
        }
        if (disableComamnds) {
            this.removeCommandButton.setEnabled(false);
            this.upButton.setEnabled(false);
            this.downButton.setEnabled(false);
        }
        panel.fireChangeEvent(); // Notify that the panel changed
    }

    private ComboBoxModel getPreviewModel() {
        tags = new String[PropertyContainer.PROPERTY_CONTAINER_CONTEXTS.length + 2];
        for (int i = 0; i < PropertyContainer.PROPERTY_CONTAINER_CONTEXTS.length; i++) {
            tags[i + 1] = PropertyContainer.PROPERTY_CONTAINER_CONTEXTS[i];
        }
        tags[0] = AddOnChildren.ALL;
        tags[tags.length - 1] = AddOnChildren.BACK_END;
        return new DefaultComboBoxModel(tags);
    }

    /**
     * Select the first node that is not a menu node,
     * thus opening the tree structure untill there
     * @param node the starting node
     */
    private void selectFirstLeaf(Node node) {
        Node[] nodes = node.getChildren().getNodes();
        if (nodes != null && nodes.length > 0) {
            selectFirstLeaf(nodes[0]);
        }
        else {
            try {
                manager.setSelectedNodes(new Node[]{node});
            } catch (PropertyVetoException ex) {
                LogWriter.getLogWriter().log(LogWriter.LEVEL_INFO, "Cannot set selected node."); // NOI18N
            }
        }
    }
}
