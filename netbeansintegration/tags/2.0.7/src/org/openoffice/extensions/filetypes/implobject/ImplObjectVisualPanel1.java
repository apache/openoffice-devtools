/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

package org.openoffice.extensions.filetypes.implobject;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Pattern;
import javax.swing.ComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.SwingConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.spi.project.ui.templates.support.Templates;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openoffice.extensions.util.IdlFileHelper;
import org.openoffice.extensions.util.LogWriter;
import org.openoffice.extensions.util.datamodel.NbNodeObject;
import org.openoffice.extensions.util.typebrowser.logic.UnoTypes;
import org.openoffice.extensions.util.typebrowser.logic.TypeNode;

public final class ImplObjectVisualPanel1 extends JPanel implements DocumentListener, KeyListener, ActionListener {
    
    public static final String PROP_NAME = "name"; // NOI18N
    
    private SourceFolderComboBoxModel m_comboBoxModel;
    private String m_sBasePath;
    private Vector<String> m_services;
    private ImplObjectWizardPanel1 panel;
    private String m_sPackage;
    private NbNodeObject[] m_IdlFiles;
    private boolean m_bServiceAdded;
    
    /**
     * Creates new form ImplObjectVisualPanel1
     */
    public ImplObjectVisualPanel1(ImplObjectWizardPanel1 panel) {
        this.panel = panel;
        m_sPackage = "";
        m_comboBoxModel = new SourceFolderComboBoxModel();
        Image iconImage = ImageUtilities.loadImage("org/openoffice/extensions/projecttemplates/component/icons/module.png");
        SourceFolderListCellRenderer renderer = new SourceFolderListCellRenderer(new ImageIcon(iconImage));
        m_services = new Vector<String>();
        initComponents();
        packageComboBox.setRenderer(renderer);
        packageComboBox.addActionListener(this);
        packageComboBox.getEditor().getEditorComponent().addKeyListener(this);
        nameTextField1.getDocument().addDocumentListener(this);
    }
    
    public String getName() {
        return NbBundle.getMessage(ImplObjectIterator.class, "ImplObjectVisualPanelName"); // NOI18N
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nameTextField1 = new javax.swing.JTextField();
        packageComboBox = new javax.swing.JComboBox();
        projectTextField = new javax.swing.JTextField();
        locationTextField = new javax.swing.JTextField();
        createdFileTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        serviceTextField = new javax.swing.JTextField();
        jBrowsButton = new javax.swing.JButton();

        jLabel1.setLabelFor(nameTextField1);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, NbBundle.getMessage(ImplObjectVisualPanel1.class, "LBL_ClassName")); // NOI18N

        jLabel2.setLabelFor(projectTextField);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, NbBundle.getMessage(ImplObjectVisualPanel1.class, "LBL_Project")); // NOI18N

        jLabel3.setLabelFor(locationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, NbBundle.getMessage(ImplObjectVisualPanel1.class, "LBL_Location")); // NOI18N

        jLabel4.setLabelFor(packageComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, NbBundle.getMessage(ImplObjectVisualPanel1.class, "LBL_Package")); // NOI18N

        jLabel5.setLabelFor(createdFileTextField);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, NbBundle.getMessage(ImplObjectVisualPanel1.class, "LBL_CreatedFile")); // NOI18N

        nameTextField1.setText("NewUNOJavaImpl");

        packageComboBox.setEditable(true);
        packageComboBox.setModel(m_comboBoxModel);
        packageComboBox.setActionCommand("packageComboBoxChanged");

        projectTextField.setEditable(false);

        locationTextField.setEditable(false);
        locationTextField.setText("Source Packages");

        createdFileTextField.setEditable(false);

        jLabel6.setLabelFor(serviceTextField);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, NbBundle.getMessage(ImplObjectVisualPanel1.class, "LBL_Service")); // NOI18N

        serviceTextField.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jBrowsButton, NbBundle.getMessage(ImplObjectVisualPanel1.class, "LBL_BUTTON_SelectService")); // NOI18N
        jBrowsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrowsButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                            .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(locationTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, packageComboBox, 0, 309, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, nameTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, createdFileTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, projectTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(serviceTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jBrowsButton)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(nameTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .add(40, 40, 40)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jBrowsButton)
                    .add(serviceTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(projectTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(locationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(packageComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(createdFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(114, 114, 114))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jBrowsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowsButtonActionPerformed

        // open dialog
        ImplObjectTypeBrowser typeBrowser = new ImplObjectTypeBrowser(this, 
                new String[]{UnoTypes.MODULE, UnoTypes.SERVICE, UnoTypes.INTERFACE},
                m_IdlFiles);
        
        DialogDescriptor ddscr = new DialogDescriptor(typeBrowser,
                NbBundle.getMessage(ImplObjectVisualPanel1.class, "LBL_TypeBrowser_Title"));

        typeBrowser.addDialogDescriptor(ddscr);
        
        Dialog d = DialogDisplayer.getDefault().createDialog(ddscr);
        d.setVisible(true);

    }//GEN-LAST:event_jBrowsButtonActionPerformed
    

    protected void setNodes(Node[] typeNodes) {
        // empty settings first
        String services = null; // NOI18N
        m_services.clear();
        m_bServiceAdded = false;
        for (int i = 0; i < typeNodes.length; i++) {
            TypeNode node = (TypeNode)typeNodes[i];
            if (node.getNodeType() == UnoTypes.SERVICE_TYPE ||
                node.getNodeType() == UnoTypes.INTERFACE_TYPE) {
                m_services.add(node.getHierarchicalName());
                if (services != null) // null only when i == 0
                    services = services.concat(", ").concat(node.getHierarchicalName()); // NOI18N
                else 
                    services = node.getHierarchicalName();
            }
            m_bServiceAdded |= (node.getNodeType() == UnoTypes.SERVICE_TYPE);
        }
        serviceTextField.setText(services);
        String etxt = serviceTextField.getText();
        panel.fireChangeEvent();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField createdFileTextField;
    private javax.swing.JButton jBrowsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JTextField nameTextField1;
    private javax.swing.JComboBox packageComboBox;
    private javax.swing.JTextField projectTextField;
    private javax.swing.JTextField serviceTextField;
    // End of variables declaration//GEN-END:variables
    
    protected void read(WizardDescriptor desc) {
        // project name 
        Project p = Templates.getProject(desc);
        if (p != null) {
            String displayName = ProjectUtils.getInformation(p).getDisplayName();
            projectTextField.setText(displayName);
            FileObject sourceObject = null;
            try {
                FileObject projDir = p.getProjectDirectory();
                desc.putProperty("projdir", FileUtil.toFile(projDir)); // NOI18N
                sourceObject = FileUtil.createFolder(projDir, "src"); // NOI18N
                m_comboBoxModel.setItems(getOrderedSubFolders(sourceObject));
                IdlFileHelper idlHelper = new IdlFileHelper(sourceObject);
                this.m_IdlFiles = idlHelper.getAllIdlFiles();
            } catch (IOException ex) {
                LogWriter.getLogWriter().printStackTrace(ex);
            }
            
            // update UI
            if (sourceObject != null) {
                try {
                    File baseFile = FileUtil.toFile(sourceObject);
                    this.m_sBasePath = baseFile.getCanonicalPath();
                    desc.putProperty("srcdir", baseFile); // NOI18N
                } catch (IOException ex) {
                    LogWriter.getLogWriter().printStackTrace(ex);
                }
            }
            updateCreatedFileTextField();
        }
    }
    
    protected void store(WizardDescriptor desc) {
        String name = this.nameTextField1.getText();
        
        desc.putProperty("Name", name); // NOI18N
        desc.putProperty("mainClassName", name); // NOI18N

        // TODO: consolidate different keys for the same values
        desc.putProperty("Package", m_sPackage); // NOI18N
        desc.putProperty("UnoPackage", m_sPackage); // NOI18N
        desc.putProperty("packageName", m_sPackage); // NOI18N

        desc.putProperty("DoRegistration", m_bServiceAdded);
        desc.putProperty("Service", m_services.toArray(new String[m_services.size()])); // NOI18N
    }
    
    protected boolean valid() {
        String text = serviceTextField.getText();
        return text.length() > 0;
    }
    
    private void updateCreatedFileTextField() {
        String selectedPackage = m_sPackage.replace('.', File.separatorChar);
        String fileName = nameTextField1.getText();

        String fullName = selectedPackage;
        if (!fileName.endsWith(".java")) { // NOI18N
            fullName = fullName.concat(".").concat(fileName);
            fileName = fileName.concat(".java"); // NOI18N
        }
        else {
            if (fileName.length() > 5) {
                fullName = fullName.concat(".").concat(fileName.substring(0, fileName.length() - 5));
            }
        }
        
        String[] services = m_services.toArray(new String[m_services.size()]);
        for (int i = 0; i < services.length; i++) {
            String serviceName = services[i];
            if (fullName.equals(serviceName)) {

            }
        }
        if (m_sBasePath != null) {
            String fullFileName = m_sBasePath.concat(File.separator).concat(selectedPackage).concat(File.separator).concat(fileName);
            createdFileTextField.setText(fullFileName);
        }
        else {
            String fullFileName = "...".concat(File.separator).concat(selectedPackage).concat(File.separator).concat(fileName); // NOI18N
            createdFileTextField.setText(fullFileName);
        }
        panel.fireChangeEvent();
    }
    
    private String[] getOrderedSubFolders(FileObject sourceObject) {
        Vector<String>subFolders = new Vector<String>();
        int length = sourceObject.getPath().length();
        if (sourceObject != null) {
            Enumeration sourceChildren = sourceObject.getFolders(true);
            while (sourceChildren.hasMoreElements()) {
                FileObject nextCandidate = (FileObject)sourceChildren.nextElement();
                String p = nextCandidate.getPath();
                subFolders.add(p.substring(length + 1).replace('/', '.'));
            }
        }
        return subFolders.toArray(new String[subFolders.size()]);
    }

    public void insertUpdate(DocumentEvent documentEvent) {
        updateCreatedFileTextField();
    }

    public void removeUpdate(DocumentEvent documentEvent) {
        updateCreatedFileTextField();
    }

    public void changedUpdate(DocumentEvent documentEvent) {
        updateCreatedFileTextField();
    }

    public void actionPerformed(ActionEvent actionEvent) {
        if (actionEvent.getActionCommand().equals(packageComboBox.getActionCommand())) {
            m_sPackage = packageComboBox.getSelectedItem().toString();
            updateCreatedFileTextField();
        }
    }

    public void keyTyped(KeyEvent e) {
        char c = e.getKeyChar();
        String charc = new String(new char[]{c});
        m_sPackage = packageComboBox.getEditor().getItem().toString();
        if (Pattern.matches("[a-zA-Z_0-9\\.]", charc)) {
            m_sPackage = m_sPackage.concat(charc);
        }
        updateCreatedFileTextField();
    }

    public void keyPressed(KeyEvent e) {
    }

    public void keyReleased(KeyEvent e) {
    }
    
    private class SourceFolderComboBoxModel implements ComboBoxModel {
        Vector<ListDataListener> listeners;
        private String[] items;
        private int index;
        public SourceFolderComboBoxModel() {
            listeners = new Vector<ListDataListener>();
            items = new String[0];
        }
        public void setItems(String[] itemArray) {
            if (itemArray != null && itemArray.length > 0) {
                items = itemArray;
                for (Iterator<ListDataListener>it = listeners.iterator(); it.hasNext();) {
                    ListDataListener l = it.next();
                    l.contentsChanged(new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, 
                            0, items.length - 1));
                }
            }
        }
        public void setSelectedItem(Object object) {
            for (int i = 0; i < items.length; i++) {
                if (items[i].equals(object)) {
                    index = i;
                }
            }
        }
        public Object getSelectedItem() {
            if (index >= 0 && index < items.length) {
                return items[index];
            }
            return null;
        }
        public int getSize() {
            return items.length;
        }
        public Object getElementAt(int i) {
            if (i >= 0 && i < items.length) {
                return items[i];
            }
            return null;
        }
        public void addListDataListener(ListDataListener listDataListener) {
            listeners.add(listDataListener);
        }
        public void removeListDataListener(ListDataListener listDataListener) {
            listeners.remove(listDataListener);
        }
    }

    private class SourceFolderListCellRenderer extends JLabel implements ListCellRenderer {
        public SourceFolderListCellRenderer(ImageIcon icon) {
            super(icon, SwingConstants.LEFT);
            setOpaque(true);
        }
        public Component getListCellRendererComponent(JList list, Object value, int index, 
            boolean isSelected, boolean cellHasFocus) {
            Object e = m_comboBoxModel.getElementAt(index);
            if (e != null) {
                String name = e.toString();
                this.setText(name);
                if (isSelected) {
                    setBackground(new Color(184, 207, 229));
                }
                else {
                    setBackground(new Color(255, 255, 255));
                }
            }
            return this;
        }
    }
}

