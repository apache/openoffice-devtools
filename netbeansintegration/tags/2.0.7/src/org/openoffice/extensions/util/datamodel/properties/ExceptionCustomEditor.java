/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

package org.openoffice.extensions.util.datamodel.properties;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.propertysheet.PropertyEnv;
import org.openide.explorer.propertysheet.editors.EnhancedCustomPropertyEditor;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openoffice.extensions.util.LogWriter;
import org.openoffice.extensions.util.typebrowser.logic.UnoTypes;
import org.openoffice.extensions.util.typebrowser.logic.TypeNode;

/**
 *
 * @author  sg128468
 */
public class ExceptionCustomEditor extends javax.swing.JPanel 
        implements ExplorerManager.Provider, PropertyChangeListener, 
        VetoableChangeListener, EnhancedCustomPropertyEditor {        
    
    private ExplorerManager manager = new ExplorerManager();
    private PropertyEnv propertyEnv;
//    private Vector<String>exceptionContainer;
    private DefaultListModel exceptionContainer;
    private ExceptionPropertyEditor editor;
    
    /** Creates new form ExceptionCustomEditor */
    public ExceptionCustomEditor(ExceptionPropertyEditor editor, PropertyEnv propertyEnv) {
        exceptionContainer = new DefaultListModel();
        createExceptionList(editor.getAsText());
        this.propertyEnv = propertyEnv;
        LogWriter.getLogWriter().log(LogWriter.LEVEL_INFO, propertyEnv.getFeatureDescriptor().toString());
        this.editor = editor;
        initComponents();
        
        propertyEnv.setState(PropertyEnv.STATE_NEEDS_VALIDATION);
        propertyEnv.addVetoableChangeListener(this);

        Node node = TypeNode.createRootNode(new String[]{UnoTypes.EXCEPTION, UnoTypes.MODULE});

        manager.setRootContext(node);
        BeanTreeView exceptionView = (BeanTreeView)existingExecptionsView;
        manager.addPropertyChangeListener(this);    
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        exceptionList = new javax.swing.JList();
        existingExceptions = new javax.swing.JLabel();
        deleteException = new javax.swing.JButton();
        showException = new javax.swing.JLabel();
        addException = new javax.swing.JButton();
        existingExecptionsView = new BeanTreeView();

        exceptionList.setModel(getListModel());
        jScrollPane1.setViewportView(exceptionList);

        existingExceptions.setLabelFor(exceptionList);
        existingExceptions.setText(NbBundle.getMessage(ExceptionCustomEditor.class, "LBL_AddedExceptions")); // NOI18N

        deleteException.setText(NbBundle.getMessage(ExceptionCustomEditor.class, "LBL_BUTTON_DeleteException")); // NOI18N
        deleteException.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteExceptionActionPerformed(evt);
            }
        });

        showException.setLabelFor(existingExecptionsView);
        showException.setText(NbBundle.getMessage(ExceptionCustomEditor.class, "LBL_ExistingExceptions")); // NOI18N

        addException.setText(NbBundle.getMessage(ExceptionCustomEditor.class, "LBL_BUTTON_AddException")); // NOI18N
        addException.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExceptionActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(existingExceptions, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                    .add(showException)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(existingExecptionsView, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, addException, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, deleteException, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(existingExceptions)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(deleteException)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(showException)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(existingExecptionsView, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .add(addException))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteExceptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteExceptionActionPerformed

        int[] indices = exceptionList.getSelectedIndices();
        for (int i=0; i<indices.length; i++) {
            int index = indices[i];
            if (index < 0 || index >= exceptionContainer.size()) {
                index = exceptionContainer.size() - 1;
            }
            exceptionContainer.remove(index);
        }
        exceptionList.updateUI();
        // disable delete button
        if (exceptionContainer.size() == 0) {
            deleteException.setEnabled(false);
        }

    }//GEN-LAST:event_deleteExceptionActionPerformed

    private void addExceptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExceptionActionPerformed

        Node[] nodes = manager.getSelectedNodes();
        if (nodes != null) {
            for (int i=0; i<nodes.length; i++) {
                TypeNode node = (TypeNode)nodes[i];
                if (!exceptionContainer.contains(node.getHierarchicalName()))
                    exceptionContainer.addElement(node.getHierarchicalName());
            }
        }
        exceptionList.setSelectedIndex(exceptionContainer.size() - 1); // select the last added
        exceptionList.updateUI();
        // enable delete button
        deleteException.setEnabled(true);

    }//GEN-LAST:event_addExceptionActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addException;
    private javax.swing.JButton deleteException;
    private javax.swing.JList exceptionList;
    private javax.swing.JLabel existingExceptions;
    private javax.swing.JScrollPane existingExecptionsView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel showException;
    // End of variables declaration//GEN-END:variables

    private void createExceptionList(String exceptionList) {
        StringTokenizer t = new StringTokenizer(exceptionList, " ,"); // NOI18N
        while(t.hasMoreTokens()) {
            String listMember = t.nextToken();
            if (listMember.length() != 0) {
                exceptionContainer.addElement(listMember);
            }
        }
    }
    
    private ListModel getListModel() {
        return exceptionContainer;
    }

    public ExplorerManager getExplorerManager() {
        return manager;
    }

    public void propertyChange(PropertyChangeEvent evt) {
        Node[] nodes = manager.getSelectedNodes();
        if (nodes != null && nodes.length > 0) {
            TypeNode node = (TypeNode)nodes[0];  // single tree selection

            if (node.getNodeType() != UnoTypes.MODULE_TYPE) { // do not add modules to this type
                addException.setEnabled(true);
            }
            else {
                addException.setEnabled(false);
            }
        }
        if (exceptionContainer.size() == 0) {
            deleteException.setEnabled(false);
        }
        else {
            deleteException.setEnabled(true);
        }
    }

    public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {
        if (PropertyEnv.PROP_STATE.equals(evt.getPropertyName())) { // OK pressed
            editor.setValue((String)getPropertyValue());
        }        
    }

    public Object getPropertyValue() throws IllegalStateException {
        StringBuffer result = new StringBuffer();
        for (int i=0; i<exceptionContainer.size(); i++) {
            if (i > 0) {
                result.append(", "); // NOI18N
            }
            result.append(exceptionContainer.get(i));
        }
        return result.toString();
    }
}
