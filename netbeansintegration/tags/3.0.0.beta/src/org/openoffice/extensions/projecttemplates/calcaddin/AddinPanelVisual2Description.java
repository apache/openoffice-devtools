/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

package org.openoffice.extensions.projecttemplates.calcaddin;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.util.Vector;
import javax.swing.ActionMap;
import javax.swing.JPanel;
import javax.swing.tree.TreeSelectionModel;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.propertysheet.PropertySheet;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openoffice.extensions.util.datamodel.Function;
import org.openoffice.extensions.util.datamodel.localization.LanguageDefinition;
import org.openoffice.extensions.util.datamodel.properties.LocalizedOpenOfficeOrgProperty;
import org.openoffice.extensions.util.datamodel.NbNodeObject;
import org.openoffice.extensions.util.datamodel.properties.OpenOfficeOrgProperty;
import org.openoffice.extensions.util.datamodel.Parameter;
import org.openoffice.extensions.util.datamodel.properties.UnknownOpenOfficeOrgLanguageIDException;
import org.openoffice.extensions.projecttemplates.calcaddin.datamodel.node.AddInNode;
import org.openoffice.extensions.projecttemplates.calcaddin.datamodel.node.AddInTreeCreator;
import org.openoffice.extensions.util.LogWriter;

public class AddinPanelVisual2Description extends JPanel 
        implements ExplorerManager.Provider, PropertyChangeListener {
    
    public static final String PROP_PROJECT_NAME = "descFirst"; // NOI18N
    
    private ExplorerManager manager = new ExplorerManager();
    private PropertySheet propSheet;
    private Lookup lookup;
    
    private AddinActions actions;
    private AddinWizardPanel2Description panel;
    
    /** Creates new form PanelProjectLocationVisual */
    public AddinPanelVisual2Description(AddinWizardPanel2Description panel) {
        initComponents();
        
        this.panel = panel;

        manager.setRootContext(AddInTreeCreator.createInitialFunctionTree());

        BeanTreeView view = (BeanTreeView)jScrollPane1;
        view.setRootVisible(false);
        view.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        
        // for keyboard actions enable this: handle actions must be done, too
        ActionMap map = getActionMap();
//        map.put("delete", ExplorerUtils.actionDelete(manager, true)); // NOI18N

        propSheet = (PropertySheet)jPanel1;
        // this does not seem to work; commented -> later version of NB?
//        propSheet.addPropertyChangeListener(this);  
        
        actions = new AddinActions(manager, panel);
        // deliver the actual actions to the node-actions
        AddInNode rootNode = (AddInNode)manager.getRootContext();
        rootNode.setActions(actions);
        
        manager.addPropertyChangeListener(this);
        lookup = ExplorerUtils.createLookup(manager, map);
    }
    
    public ExplorerManager getExplorerManager() {
        return manager;
    }
   
    public Lookup getLookup() {
        return lookup;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new PropertySheet();
        jScrollPane1 = new BeanTreeView();
        addFunctionButton = new javax.swing.JButton();
        deleteLanguageButton = new javax.swing.JButton();
        addParameterButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        addLanguageButton = new javax.swing.JButton();

        setAutoscrolls(true);
        setRequestFocusEnabled(false);

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setForeground(java.awt.Color.white);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMinimumSize(new java.awt.Dimension(5, 10));
        jPanel1.setName("properties"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(5, 10));
        jSplitPane1.setRightComponent(jPanel1);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setMinimumSize(new java.awt.Dimension(5, 10));
        jScrollPane1.setName("functionList"); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(5, 10));
        jSplitPane1.setLeftComponent(jScrollPane1);

        org.openide.awt.Mnemonics.setLocalizedText(addFunctionButton, org.openide.util.NbBundle.getMessage(AddinWizardIterator.class, "LBL_BUTTON_AddFunction")); // NOI18N
        addFunctionButton.setToolTipText(NbBundle.getMessage(AddinPanelVisual2Description.class, "BUTTON_AddFunction_Tooltip")); // NOI18N
        addFunctionButton.setName("addFunction"); // NOI18N
        addFunctionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFunctionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(deleteLanguageButton, org.openide.util.NbBundle.getMessage(AddinWizardIterator.class, "LBL_BUTTON_DeleteLanguage")); // NOI18N
        deleteLanguageButton.setToolTipText(NbBundle.getMessage(AddinPanelVisual2Description.class, "BUTTON_DeleteLang_Tooltip")); // NOI18N
        deleteLanguageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLanguageButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addParameterButton, org.openide.util.NbBundle.getMessage(AddinWizardIterator.class, "LBL_BUTTON_AddParameter")); // NOI18N
        addParameterButton.setToolTipText(NbBundle.getMessage(AddinPanelVisual2Description.class, "BUTTON_AddParam_Tooltip")); // NOI18N
        addParameterButton.setName("addParamater"); // NOI18N
        addParameterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addParameterButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(deleteButton, org.openide.util.NbBundle.getMessage(AddinWizardIterator.class, "LBL_BUTTON_Delete")); // NOI18N
        deleteButton.setToolTipText(NbBundle.getMessage(AddinPanelVisual2Description.class, "BUTTON_Delete_Tooltip")); // NOI18N
        deleteButton.setName("delete"); // NOI18N
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addLanguageButton, org.openide.util.NbBundle.getMessage(AddinWizardIterator.class, "LBL_BUTTON_AddLanguage")); // NOI18N
        addLanguageButton.setToolTipText(NbBundle.getMessage(AddinPanelVisual2Description.class, "BUTTON_AddLang_Tooltip")); // NOI18N
        addLanguageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLanguageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addLanguageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addParameterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteLanguageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addFunctionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(addFunctionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addParameterButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 315, Short.MAX_VALUE)
                .addComponent(addLanguageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteLanguageButton))
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteLanguageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLanguageButtonActionPerformed

        actions.deleteLanguageAction();
        
    }//GEN-LAST:event_deleteLanguageButtonActionPerformed

    private void addLanguageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLanguageButtonActionPerformed
        
        actions.addLanguageAction();

    }//GEN-LAST:event_addLanguageButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        actions.deleteAction();

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addParameterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addParameterButtonActionPerformed

        actions.addParameterAction();

    }//GEN-LAST:event_addParameterButtonActionPerformed

    private void addFunctionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFunctionButtonActionPerformed

        actions.addFunctionAction();

    }//GEN-LAST:event_addFunctionButtonActionPerformed
        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFunctionButton;
    private javax.swing.JButton addLanguageButton;
    private javax.swing.JButton addParameterButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteLanguageButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
    
    public void addNotify() {
        super.addNotify();
        try {
            //same problem as in 31086, initial focus on Cancel button
            manager.setSelectedNodes(manager.getRootContext().getChildren().getNodes());
        } catch (PropertyVetoException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }
    }
    
    boolean valid(WizardDescriptor wizardDescriptor) {
        Node node = manager.getRootContext();
        // first subnodes are functions
        NbNodeObject addIn = (NbNodeObject)node.getLookup().lookup(NbNodeObject.class);
        NbNodeObject[] subNodes = addIn.getAllSubObjects();
        if (subNodes.length == 0) {
            String message = NbBundle.getMessage(AddinWizardIterator.class, "LB_Error_FunctionMissing");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }
        Vector<String> functions = new Vector<String>();
        for (int i=0; i<subNodes.length; i++) {
            Function function = (Function)subNodes[i];
            try {
                String funcName = function.getProperty(function.PROPERTY_Name).getValueForLanguage(-1);
                if (functions.contains(funcName)) {
                    String message = NbBundle.getMessage(AddinWizardIterator.class, "LB_Error_FunctionUniqueName");
                    wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
                    return false;
                }
                else {
                    functions.add(funcName);
                }
            } catch (UnknownOpenOfficeOrgLanguageIDException ex) {
                LogWriter.getLogWriter().printStackTrace(ex);
            }
            
            // check for multilingual entries
            LocalizedOpenOfficeOrgProperty prop = (LocalizedOpenOfficeOrgProperty)function.getProperty(function.PROPERTY_DisplayName);
            Integer[] indexes = prop.getUsedLanguageIndexes();
            if (indexes == null || indexes.length == 0) {
                String message = NbBundle.getMessage(AddinWizardIterator.class, "LB_Error_LanguageMissing");
                wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
                return false;
            }
            
            String[] paramNames = function.getAllSetObjectNames();
            Vector<String> parameters = new Vector<String>();
            for (int j=0; j<paramNames.length; j++) {
                Parameter param = (Parameter)function.getSetObject(paramNames[j]);
                try {
                    String paramName = param.getProperty(param.PROPERTY_Name).getValueForLanguage(-1);
                    if (parameters.contains(paramName)) {
                        String message = NbBundle.getMessage(AddinWizardIterator.class, "LB_Error_ParameterUniqueName");
                        wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
                        return false;
                    }
                    else {
                        parameters.add(paramName);
                    }
                } catch (UnknownOpenOfficeOrgLanguageIDException ex) {
                    LogWriter.getLogWriter().printStackTrace(ex);
                }
            }
        }
        wizardDescriptor.putProperty("WizardPanel_errorMessage", ""); // NOI18N
        return true;
    }
    
    void store(WizardDescriptor d) {
        Node node = manager.getRootContext();
        // first subnodes are functions
        NbNodeObject addIn = (NbNodeObject)node.getLookup().lookup(NbNodeObject.class);
        d.putProperty("ServiceObject", addIn); // NOI18N
        NbNodeObject[] subNodes = addIn.getAllSubObjects();
        d.putProperty("functionCount", new Integer(subNodes.length)); // NOI18N
        for (int i=0; i<subNodes.length; i++) {
            Vector<String> functionSignatureContainer = new Vector<String>();
            Function function = (Function)subNodes[i];
            try {
                String retValue = function.getProperty(function.PROPERTY_Type).getValueForLanguage(-1);
                functionSignatureContainer.add(retValue);
                String funcName = function.getProperty(function.PROPERTY_Name).getValueForLanguage(-1);
                functionSignatureContainer.add(funcName);
                
                // function specific stuff
                String category = function.getProperty(function.PROPERTY_Category).getValueForLanguage(-1);
                d.putProperty(funcName.concat("Category"), category); // NOI18N
                
                // multilingual stuff
                LocalizedOpenOfficeOrgProperty prop = (LocalizedOpenOfficeOrgProperty)function.getProperty(function.PROPERTY_DisplayName);
                String[][]localProps = getLocalizedProperties(prop, funcName);
                d.putProperty(funcName.concat("DisplayName"), localProps); // NOI18N

                prop = (LocalizedOpenOfficeOrgProperty)function.getProperty(function.PROPERTY_Description);
                localProps = getLocalizedProperties(prop, null);
                d.putProperty(funcName.concat("Description"), localProps); // NOI18N
                
//                prop = (LocalizedOpenOfficeOrgProperty)function.getProperty(function.PROPERTY_CategoryDisplayName);
//                localProps = getLocalizedProperties(prop);
//                d.putProperty(funcName.concat("CategoryDisplayName"), localProps); // NOI18N
                
                prop = (LocalizedOpenOfficeOrgProperty)function.getProperty(function.PROPERTY_CompatibilityName);
                localProps = getLocalizedProperties(prop, null);
                d.putProperty(funcName.concat("CompatibilityName"), localProps); // NOI18N
                
                // function parameters
                String[] paramNames = function.getAllSetObjectNames();
                for (int j=0;j<paramNames.length; j++) {
                    Parameter parameter = (Parameter)function.getSetObject(paramNames[j]);
                    String type = parameter.getProperty(parameter.PROPERTY_Type).getValueForLanguage(-1);
                    functionSignatureContainer.add(type);
                    String name = parameter.getProperty(parameter.PROPERTY_Name).getValueForLanguage(-1);
                    functionSignatureContainer.add(name);

                    // multilingual stuff
                    prop = (LocalizedOpenOfficeOrgProperty)parameter.getProperty(parameter.PROPERTY_DisplayName);
                    localProps = getLocalizedProperties(prop, name);
                    d.putProperty(funcName.concat(name.concat("DisplayName")), localProps); // NOI18N

                    prop = (LocalizedOpenOfficeOrgProperty)parameter.getProperty(parameter.PROPERTY_Description);
                    localProps = getLocalizedProperties(prop, null);
                    d.putProperty(funcName.concat(name.concat("Description")), localProps); // NOI18N

                }
            } catch (UnknownOpenOfficeOrgLanguageIDException ex) {
                LogWriter.getLogWriter().printStackTrace(ex);
            }
            String[] functionArray = (String[])functionSignatureContainer.toArray(new String[functionSignatureContainer.size()]);
            d.putProperty(new StringBuffer("function").append(i).toString(), functionArray); // NOI18N
        }
    }
    
    private String[][] getLocalizedProperties(LocalizedOpenOfficeOrgProperty prop, String defaultValue) {
        if (defaultValue == null) defaultValue = ""; // NOI18N
        Integer[] indexes = prop.getUsedLanguageIndexes();
        String[][] retValue = new String[2][indexes.length];
        for (int i=0; i<indexes.length; i++) {
            int languageID = indexes[i].intValue();
            String text = prop.getValueForLanguage(languageID);
            String language = LanguageDefinition.getLanguageShortNameForId(languageID);
            retValue[0][i] = language;
            if (text != null && text.length() > 0 && text.charAt(0) != '<' 
                            && text.charAt(text.length() - 1) != '>') {
                retValue[1][i] = text;
            }
            else {
                retValue[1][i] = defaultValue;
            }
        }
        return retValue;
    }
    
    void read(WizardDescriptor settings) {
/*        File projectLocation = (File) settings.getProperty("projdir"); // NOI18N
        if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile().isDirectory()) {
            projectLocation = ProjectChooser.getProjectsFolder();
        } else {
            projectLocation = projectLocation.getParentFile();
        }
        this.projectLocationTextField.setText(projectLocation.getAbsolutePath());
        
        String projectName = (String) settings.getProperty("name"); // NOI18N
        if(projectName == null) {
            projectName = "AddIn"; // NOI18N
        }
        this.projectNameTextField.setText(projectName);
        this.projectNameTextField.selectAll(); */
    }
    
    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }

    public void propertyChange(PropertyChangeEvent evt) {
        // because of TreeSelectionModel.SINGLE_TREE_SELECTION max. one node is selected
        Node[] selectedNodes = manager.getSelectedNodes();
        if (selectedNodes.length > 0) {
            NbNodeObject nodeObject = (NbNodeObject)selectedNodes[0].getLookup().lookup(NbNodeObject.class);
            if (nodeObject instanceof OpenOfficeOrgProperty) {
                addParameterButton.setEnabled(false);
                deleteButton.setEnabled(false);
            }
            else {
                addParameterButton.setEnabled(true);
                deleteButton.setEnabled(true);
            }
        }
        propSheet.setNodes(selectedNodes);
        panel.fireChangeEvent(); // Notify that the panel changed
    }
}
