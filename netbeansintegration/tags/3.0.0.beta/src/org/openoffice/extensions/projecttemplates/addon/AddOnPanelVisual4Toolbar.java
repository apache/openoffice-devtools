/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

package org.openoffice.extensions.projecttemplates.addon;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.propertysheet.PropertySheet;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openoffice.extensions.projecttemplates.addon.datamodel.AddOn;
import org.openoffice.extensions.projecttemplates.addon.datamodel.SeparatorElement;
import org.openoffice.extensions.projecttemplates.addon.datamodel.node.AddOnChildren;
import org.openoffice.extensions.projecttemplates.addon.datamodel.node.AddOnNode;
import org.openoffice.extensions.projecttemplates.addon.datamodel.node.AddOnTreeCreator;
import org.openoffice.extensions.projecttemplates.addon.dialogs.AddDeletedCommandPanel;
import org.openoffice.extensions.util.LogWriter;
import org.openoffice.extensions.util.datamodel.NbNodeObject;
import org.openoffice.extensions.util.datamodel.PropertyContainer;
import org.openoffice.extensions.util.datamodel.properties.UnknownOpenOfficeOrgPropertyException;

public class AddOnPanelVisual4Toolbar extends JPanel implements
        ExplorerManager.Provider, ActionListener {
    
    public static final String PROP_PROJECT_NAME = "descFirst"; // NOI18N
    
    private ExplorerManager manager = new ExplorerManager();
    private PropertySheet propSheet;
    private Lookup lookup;
    
    private AddOnActions actions;
    private AddOnWizardPanel4Toolbar panel;
    private ButtonPanel buttonPanel;

//    private NbNodeObject rootAddOn;
    private AddOnNode m_rootAddOnNode;
    private Node m_SelectedNode;
    
    private String[] tags;
    
    /** Creates new form PanelProjectLocationVisual */
    public AddOnPanelVisual4Toolbar(AddOnWizardPanel4Toolbar panel) {
        buttonPanel = new ButtonPanel(this);
        initComponents();
        
        this.panel = panel;

        actions = new AddOnActions(manager, panel);
        propSheet = (PropertySheet)jPanel1;
        
        // for keyboard actions enable this: handle actions must be done, too
//        ActionMap map = getActionMap();
//        map.put("delete", ExplorerUtils.actionDelete(manager, true)); // NOI18N
//        manager.addPropertyChangeListener(this);
//        lookup = ExplorerUtils.createLookup(manager, map);
    }
    
    public Lookup getLookup() {
        return lookup;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deleteButton = new javax.swing.JButton();
        addSeparatorButton = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane1.setViewportView(buttonPanel);
        jPanel1 = new PropertySheet();
        addCommandButton = new javax.swing.JButton();
        previewComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setAutoscrolls(true);
        setRequestFocusEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(deleteButton, NbBundle.getMessage(AddOnPanelVisual4Toolbar.class, "LBL_BUTTON_Delete")); // NOI18N
        deleteButton.setActionCommand("Delete");
        deleteButton.setName("delete"); // NOI18N
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addSeparatorButton, NbBundle.getMessage(AddOnPanelVisual4Toolbar.class, "LBL_BUTTON_AddSeparator")); // NOI18N
        addSeparatorButton.setName("addSeparator"); // NOI18N
        addSeparatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSeparatorButtonActionPerformed(evt);
            }
        });

        leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/openoffice/extensions/projecttemplates/addon/icons/back.gif"))); // NOI18N
        leftButton.setName("left"); // NOI18N
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });

        rightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/openoffice/extensions/projecttemplates/addon/icons/forward.gif"))); // NOI18N
        rightButton.setMaximumSize(new java.awt.Dimension(65, 28));
        rightButton.setMinimumSize(new java.awt.Dimension(65, 28));
        rightButton.setName("right"); // NOI18N
        rightButton.setPreferredSize(new java.awt.Dimension(65, 28));
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });

        jSplitPane1.setBackground(new java.awt.Color(255, 255, 255));
        jSplitPane1.setDividerLocation(60);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setName("toolbar"); // NOI18N
        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanel1.setName("properties"); // NOI18N
        jSplitPane1.setBottomComponent(jPanel1);

        org.openide.awt.Mnemonics.setLocalizedText(addCommandButton, NbBundle.getMessage(AddOnPanelVisual4Toolbar.class, "LBL_BUTTON_AddCommand")); // NOI18N
        addCommandButton.setName("addCommand"); // NOI18N
        addCommandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommandButtonActionPerformed(evt);
            }
        });

        previewComboBox.setModel(getPreviewModel());
        previewComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setLabelFor(previewComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, NbBundle.getMessage(AddOnPanelVisual4Toolbar.class, "LBL_Preview")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(previewComboBox, 0, 380, Short.MAX_VALUE))
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addSeparatorButton, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                            .addComponent(addCommandButton, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(leftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(previewComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(addSeparatorButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addCommandButton)
                        .addGap(4, 4, 4)
                        .addComponent(deleteButton)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(leftButton)
                            .addComponent(rightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void previewComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewComboBoxActionPerformed

        int index = previewComboBox.getSelectedIndex();
        if (tags != null) {
            String context = tags[index];
            NbNodeObject aNode = (NbNodeObject)m_rootAddOnNode.getLookup().lookup(NbNodeObject.class);
            AddOnNode rootNode = new AddOnNode(aNode, new AddOnChildren(context, false, true), false, true);
            manager.setRootContext(rootNode);
            try {
                buttonPanel.buildNewList();
            } catch (UnknownOpenOfficeOrgPropertyException ex) {
                LogWriter.getLogWriter().printStackTrace(ex);
            }
            m_SelectedNode = null;
            updateButtonAndSheet();
        }

    }//GEN-LAST:event_previewComboBoxActionPerformed

    private void addCommandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommandButtonActionPerformed

        try {
            if (m_SelectedNode == null) {
                manager.setSelectedNodes(new Node[0]);
            }
            else {
                manager.setSelectedNodes(new Node[]{m_SelectedNode});
            }
        } catch (PropertyVetoException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }
        AddDeletedCommandPanel.start(actions);
        try {
            buttonPanel.buildNewList();
        } catch (UnknownOpenOfficeOrgPropertyException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }
        
    }//GEN-LAST:event_addCommandButtonActionPerformed

    private void addSeparatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSeparatorButtonActionPerformed

        try {
            if (m_SelectedNode != null) {
                manager.setSelectedNodes(new Node[]{m_SelectedNode});
                SeparatorElement sep = actions.addSeparatorAction();
                if (sep != null)
                    sep.setDisplayName(""); // NOI18N
                buttonPanel.buildNewList();
            }
        } catch (PropertyVetoException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        } catch (UnknownOpenOfficeOrgPropertyException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }
        
    }//GEN-LAST:event_addSeparatorButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        try {
            if (m_SelectedNode != null) {
                manager.setSelectedNodes(new Node[]{m_SelectedNode});
                actions.toggleVisibility();
                buttonPanel.buildNewList();
                // remove selection after delete
                m_SelectedNode = null;
                this.updateButtonAndSheet();
            }
        } catch (PropertyVetoException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        } catch (UnknownOpenOfficeOrgPropertyException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
        
        try {
            if (m_SelectedNode != null) {
                manager.setSelectedNodes(new Node[]{m_SelectedNode});
                NbNodeObject object = (NbNodeObject)
                        m_SelectedNode.getLookup().lookup(NbNodeObject.class);
                String elementName = getElementName(object);
                actions.moveUp();
                buttonPanel.buildNewList();
                enableElement(elementName);
            }
        } catch (PropertyVetoException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        } catch (UnknownOpenOfficeOrgPropertyException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }
        
    }//GEN-LAST:event_leftButtonActionPerformed

    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButtonActionPerformed

        try {
            if (m_SelectedNode != null) {
                NbNodeObject object = (NbNodeObject)
                        m_SelectedNode.getLookup().lookup(NbNodeObject.class);
                String elementName = getElementName(object);
                manager.setSelectedNodes(new Node[]{m_SelectedNode});
                actions.moveDown();
                buttonPanel.buildNewList();
                enableElement(elementName);
            }
        } catch (PropertyVetoException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        } catch (UnknownOpenOfficeOrgPropertyException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }
        
    }//GEN-LAST:event_rightButtonActionPerformed
        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCommandButton;
    private javax.swing.JButton addSeparatorButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton leftButton;
    private javax.swing.JComboBox previewComboBox;
    private javax.swing.JButton rightButton;
    // End of variables declaration//GEN-END:variables
    
    public void addNotify() {
        super.addNotify();
        try {
            //same problem as in 31086, initial focus on Cancel button
            manager.setSelectedNodes(manager.getRootContext().getChildren().getNodes());
        } catch (PropertyVetoException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        } 
    }
    
    boolean valid(WizardDescriptor wizardDescriptor) {
        Node node = manager.getRootContext();
        
        AddOn addon = (AddOn)node.getLookup().lookup(NbNodeObject.class);
        NbNodeObject[]commands = addon.getAllCommands();
        if (commands.length == 0) {
            String message = NbBundle.getMessage(AddOnWizardIterator.class, "LBL_ErrorMessageOneCommand");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }
        wizardDescriptor.putProperty("WizardPanel_errorMessage", ""); // NOI18N
        return true;
    }
    
    void store(WizardDescriptor d) {// method may be called several times!
        NbNodeObject addOn = (NbNodeObject)this.m_rootAddOnNode.getLookup().lookup(NbNodeObject.class);
        AddOn rootAddon = new AddOn();
        rootAddon.addSetObject("Toolbar", addOn); // NOI18N
        // only one menu as sub object
        d.putProperty("AddOnToolbar", rootAddon); // NOI18N
    }
    
    void read(WizardDescriptor settings) {
        AddOn addOn = (AddOn)settings.getProperty("AddOn");  // NOI18N
        AddOn restepAddOn = (AddOn)settings.getProperty("AddOnToolbar"); // NOI18N
        if (restepAddOn == null) { // first creation
            m_rootAddOnNode = AddOnTreeCreator.createToolbarStructure(addOn);
        }
        else { // restep through this panel: merge eventual changes from panel before
            m_rootAddOnNode = AddOnTreeCreator.restoreToolbarStructure(restepAddOn, addOn);
        }

//        this.m_rootAddOnNode = AddOnTreeCreator.createToolbarStructure(addOn);
//        rootAddOn = (NbNodeObject)rootAddOnNode.getLookup().lookup(NbNodeObject.class);
        
        manager.setRootContext(m_rootAddOnNode);
        try {
            buttonPanel.setManager(manager);
        } catch (UnknownOpenOfficeOrgPropertyException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }

        // enable first button in list
        Node[] nodes = manager.getRootContext().getChildren().getNodes();
        if (nodes != null && nodes.length > 0) {
            m_SelectedNode = nodes[0];
            // should update the selection in the UI, but does not work
            buttonPanel.setSelectedButton(0);
        }
        // UI 
        updateButtonAndSheet();
    }
    
    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }

    private ComboBoxModel getPreviewModel() {
        tags = new String[PropertyContainer.PROPERTY_CONTAINER_CONTEXTS.length + 2];
        for (int i = 0; i < PropertyContainer.PROPERTY_CONTAINER_CONTEXTS.length; i++) {
            tags[i + 1] = PropertyContainer.PROPERTY_CONTAINER_CONTEXTS[i];
        }
        tags[0] = AddOnChildren.ALL;
        tags[tags.length - 1] = AddOnChildren.BACK_END;
        return new DefaultComboBoxModel(tags);
    }

    public ExplorerManager getExplorerManager() {
        return manager;
    }

    public void actionPerformed(ActionEvent e) {
        String elementName = e.getActionCommand();
        enableElement(elementName);
    }
    
    private void enableElement(String elementName) {
        Node[] nodes = manager.getRootContext().getChildren().getNodes();
        m_SelectedNode = null;
        for (int i = 0; i < nodes.length; i++) {
            NbNodeObject object = (NbNodeObject)
                    nodes[i].getLookup().lookup(NbNodeObject.class);
            String name = getElementName(object);
            if (name != null && name.equals(elementName)) {
                m_SelectedNode = nodes[i];
            }
        }
        // UI 
        updateButtonAndSheet();
    }

    private String getElementName(NbNodeObject element) {
        try {
            String name = null;
            if (element.getType() == NbNodeObject.UI_SEPARATOR_TYPE) {
                SeparatorElement sep = (SeparatorElement)element;
                name = sep.getName();
            }
            else {
                PropertyContainer cont = (PropertyContainer)element;
                name = cont.getSimpleProperty(cont.PROPERTY_CONTAINER_NAME);
            }
            return name;
        } catch (UnknownOpenOfficeOrgPropertyException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }
        return null;
    }
    
    /**
     * update the sheet and enable/diasable buttons
     */
    private void updateButtonAndSheet() {
        if (m_SelectedNode == null) {
            deleteButton.setEnabled(false);
            leftButton.setEnabled(false);
            rightButton.setEnabled(false);
            propSheet.setNodes(new Node[0]);
        }
        else {
            deleteButton.setEnabled(true);
            leftButton.setEnabled(true);
            rightButton.setEnabled(true);
            propSheet.setNodes(new Node[]{m_SelectedNode});
        }
        panel.fireChangeEvent(); // Notify that the panel changed
    }
}
