/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

package org.openoffice.extensions.projecttemplates.component;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle;
import org.openoffice.extensions.config.ConfigurationSettings;
import org.openoffice.extensions.util.LogWriter;

public class ComponentPanelVisual1Project extends JPanel implements DocumentListener {
    
    public static final String PROP_PROJECT_NAME = "projectName"; // NOI18N
    private ComponentWizardPanel1Project panel;
    private boolean serviceNameModified;
    
    private String[] generatedFiles = new String[]{ "", 
                                                    "src/uno-extension-manifest.xml\n", 
                                                    "(...)"
    }; // NOI18N

    /** Creates new form PanelProjectLocationVisual */
    public ComponentPanelVisual1Project(ComponentWizardPanel1Project panel) {
        initComponents();
        this.panel = panel;
        // Register listener on the textFields to make the automatic updates
        projectNameTextField.getDocument().addDocumentListener(this);
        projectLocationTextField.getDocument().addDocumentListener(this);
        serviceNameTextField.getDocument().addDocumentListener(this);
        packageTextField.getDocument().addDocumentListener(this);
        
//        updateCreatedFiles();
//        panel.fireChangeEvent();
    }
    
    
    public String getProjectName() {
        return this.projectNameTextField.getText();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectNameLabel = new javax.swing.JLabel();
        projectNameTextField = new javax.swing.JTextField();
        projectLocationLabel = new javax.swing.JLabel();
        projectLocationTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        createdFolderLabel = new javax.swing.JLabel();
        createdFolderTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        serviceNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        packageTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextPane1 = new javax.swing.JTextPane();

        projectNameLabel.setLabelFor(projectNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, NbBundle.getMessage(ComponentWizardIterator.class, "LBL_ProjectName")); // NOI18N

        projectNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(ComponentPanelVisual1Project.class, "TF_ProjectName_Tooltip")); // NOI18N

        projectLocationLabel.setLabelFor(projectLocationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectLocationLabel, NbBundle.getMessage(ComponentWizardIterator.class, "LBL_ProjectLocation")); // NOI18N

        projectLocationTextField.setToolTipText(org.openide.util.NbBundle.getMessage(ComponentPanelVisual1Project.class, "TF_ProjectLocation_Tooltip")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, NbBundle.getMessage(ComponentWizardIterator.class, "LBL_ButtonBrowse")); // NOI18N
        browseButton.setToolTipText(org.openide.util.NbBundle.getMessage(ComponentPanelVisual1Project.class, "BUTTON_Browse_Tooltip")); // NOI18N
        browseButton.setActionCommand("BROWSE");
        browseButton.setName("browse"); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        createdFolderLabel.setLabelFor(createdFolderTextField);
        org.openide.awt.Mnemonics.setLocalizedText(createdFolderLabel, NbBundle.getMessage(ComponentWizardIterator.class, "LBL_ProjectFolder")); // NOI18N

        createdFolderTextField.setEditable(false);
        createdFolderTextField.setToolTipText(org.openide.util.NbBundle.getMessage(ComponentPanelVisual1Project.class, "TF_ProjectFolder_Tooltip")); // NOI18N

        jLabel1.setLabelFor(serviceNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, NbBundle.getMessage(ComponentWizardIterator.class, "LBL_ServiceName")); // NOI18N

        serviceNameTextField.setText("jTextField1");
        serviceNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(ComponentPanelVisual1Project.class, "TF_ClassName_Tooltip")); // NOI18N

        jLabel2.setLabelFor(packageTextField);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, NbBundle.getMessage(ComponentWizardIterator.class, "LBL_Package")); // NOI18N

        packageTextField.setText("jTextField2");
        packageTextField.setToolTipText(org.openide.util.NbBundle.getMessage(ComponentPanelVisual1Project.class, "TF_PackageName_Tooltip")); // NOI18N

        jLabel3.setLabelFor(jTextPane1);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, NbBundle.getMessage(ComponentWizardIterator.class, "LBL_CreatedFiles")); // NOI18N

        jTextPane1.setBorder(null);
        jTextPane1.setEditable(false);
        jTextPane1.setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectNameLabel)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(createdFolderLabel)
                            .addComponent(projectLocationLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                            .addComponent(serviceNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                            .addComponent(packageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                            .addComponent(projectLocationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                            .addComponent(createdFolderTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(23, 23, 23)
                        .addComponent(jTextPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseButton)
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLabel)
                    .addComponent(projectNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serviceNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(packageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectLocationLabel)
                    .addComponent(projectLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createdFolderLabel)
                    .addComponent(createdFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                    .addComponent(jLabel3))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser chooser = new JFileChooser(FileSystemView.getFileSystemView());
        FileUtil.preventFileChooserSymlinkTraversal(chooser, ConfigurationSettings.getDefaultFileChooserStartingDir());
        chooser.setDialogTitle(
            NbBundle.getMessage(ComponentWizardIterator.class, "LBL_FileChooser_Title"));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String path = this.projectLocationTextField.getText();
        if (path.length() > 0) {
            File f = new File(path);
            if (f.exists()) {
                chooser.setSelectedFile(f);
            }
        }
        if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
            File projectDir = chooser.getSelectedFile();
            ConfigurationSettings.storeDefaultFileChooserStartingDir(projectDir);
            projectLocationTextField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
        }
        panel.fireChangeEvent();
        
    }//GEN-LAST:event_browseButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel createdFolderLabel;
    private javax.swing.JTextField createdFolderTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField packageTextField;
    private javax.swing.JLabel projectLocationLabel;
    private javax.swing.JTextField projectLocationTextField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JTextField projectNameTextField;
    private javax.swing.JTextField serviceNameTextField;
    // End of variables declaration//GEN-END:variables
    
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        projectNameTextField.requestFocus();
    }
    
    private void updateCreatedFiles() {
        jTextPane1.setText(generatedFiles[0] + generatedFiles[1] +
                                 generatedFiles[2]);
    }

    boolean valid(WizardDescriptor wizardDescriptor) {
        
        if (projectNameTextField.getText().length() == 0) {
            String message = NbBundle.getMessage(ComponentWizardIterator.class, "LBL_Error_ProjectNameNotValid");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false; // Display name not specified
        }
        File f = FileUtil.normalizeFile(new File(projectLocationTextField.getText()).getAbsoluteFile());
        if (!f.isDirectory()) {
            String message = NbBundle.getBranding();
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }
        final File destFolder = FileUtil.normalizeFile(new File(createdFolderTextField.getText()).getAbsoluteFile());
        
        File projLoc = destFolder;
        while (projLoc != null && !projLoc.exists()) {
            projLoc = projLoc.getParentFile();
        }
        if (projLoc == null || !projLoc.canWrite()) {
            String message = NbBundle.getMessage(ComponentWizardIterator.class, "LBL_Error_CreateProjectFolderNot");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }
        
        if (FileUtil.toFileObject(projLoc) == null) {
            String message = NbBundle.getMessage(ComponentWizardIterator.class, "LBL_Error_ProjectFolderNotValid");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }
        
        File[] kids = destFolder.listFiles();
        if (destFolder.exists() && kids != null && kids.length > 0) {
            // Folder exists and is not empty
            String message = NbBundle.getMessage(ComponentWizardIterator.class, "LBL_Error_ProjectFolderNotEmpty");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }
        wizardDescriptor.putProperty("WizardPanel_errorMessage", ""); // NOI18N
        return true;
    }
    
    void store(WizardDescriptor d) {
        String name = projectNameTextField.getText().trim();
        String folder = createdFolderTextField.getText().trim();
        
        try {
            d.putProperty("projdir", new File(folder)); // NOI18N
            d.putProperty("name", name); // NOI18N
            d.putProperty("package", packageTextField.getText().trim()); // NOI18N
            d.putProperty("service", serviceNameTextField.getText().trim()); // NOI18N

            d.putProperty("ProjectDir", new File(folder).getCanonicalPath()); // NOI18N
            d.putProperty("ProjectName", name); // NOI18N
            d.putProperty("ProjectDisplayName", name); // NOI18N
        }
        catch (IOException e) {
            LogWriter.getLogWriter().printStackTrace(e);
        }
        String mainClass = serviceNameTextField.getText().trim();
        String packageName = packageTextField.getText().trim();
        d.putProperty("mainClassName", mainClass); // NOI18N
        d.putProperty("displayName", mainClass); // NOI18N
        d.putProperty("packageName", packageName);  // NOI18N
        d.putProperty("RegistrationClass", packageName + "." + mainClass);  // NOI18N
        d.putProperty("UnoPackage", packageName); // NOI18N

    }
    
    void read(WizardDescriptor settings) {
        File projectLocation = (File) settings.getProperty("projdir"); // NOI18N
        if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile().isDirectory()) {
            projectLocation = ProjectChooser.getProjectsFolder();
        } else {
            projectLocation = projectLocation.getParentFile();
        }
        this.projectLocationTextField.setText(projectLocation.getAbsolutePath());
        
        String projectName = (String) settings.getProperty("name"); // NOI18N
        if(projectName == null) {
            projectName = "UnoComponent"; // NOI18N
            String[] fileList = projectLocation.list(new FilenameFilter() {
                public boolean accept(File dir, String name) {
                    if (name.startsWith("UnoComponent")) return true; // NOI18N
                    return false;
                }
            });
            boolean searchProjectName = true;
            int length = projectName.length();
            for (int i=0; searchProjectName && i<fileList.length + 1; i++) {
                switch (i) {
                    case 0: // keep project name
                        break;
                    case 1: // append 1
                        projectName = new StringBuffer(projectName).append(1).toString(); 
                        break;
                    default: // remove number and append the next one
                        projectName = new StringBuffer(projectName.substring(0, length)).append(i).toString();
                }
                // test if the name is already used
                searchProjectName = false;
                for (int j=0; !searchProjectName && j<fileList.length; j++) {
                    // if the project name isn't found, searchProjectName stays false and the name is kept
                    searchProjectName |= fileList[j].equals(projectName);
                }
            }
        }
        this.projectNameTextField.setText(projectName);
        this.projectNameTextField.selectAll();

        String mainclass = (String)settings.getProperty("serviceName"); // NOI18N
        if (mainclass == null)
            mainclass = projectName;
        serviceNameTextField.setText(projectName);
        
        String packagename = (String)settings.getProperty("packageName"); // NOI18N
        if (packagename == null)
            packagename = NbBundle.getMessage(ConfigurationSettings.class, "default.package"); // NOI18N
        packageTextField.setText(packagename);
    
        updateCreatedFiles();
    }
    
    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }
    
    // Implementation of DocumentListener --------------------------------------
    
    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME,null,this.projectNameTextField.getText());
        }
    }
    
    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME,null,this.projectNameTextField.getText());
        }
    }
    
    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME,null,this.projectNameTextField.getText());
        }
    }
    
    /** Handles changes in the Project name and project directory, */
    private void updateTexts(DocumentEvent e) {
        
        Document doc = e.getDocument();
        
        if (doc == serviceNameTextField.getDocument() && projectNameTextField.getText().length()>0
                && serviceNameTextField.getText().length() > 0) {
            if (!serviceNameTextField.getText().equals(projectNameTextField.getText()))
                this.serviceNameModified = true;
        }
        
        if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()
            || doc == packageTextField.getDocument()) {
            
            String projectName = projectNameTextField.getText();
            String projectFolder = projectLocationTextField.getText();
            
            if (!serviceNameModified)
                serviceNameTextField.setText(projectName);
            
            //if (projectFolder.trim().length() == 0 || projectFolder.equals(oldName)) {
            createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);
            //}

            String packagePath = "src/" + packageTextField.getText().replace('.', '/') + '/'; // NOI18N
            generatedFiles[0] = packagePath + serviceNameTextField.getText() + "Impl.java\n"; // NOI18N
            
            updateCreatedFiles();
        }
        if (doc == serviceNameTextField.getDocument()) {
            String packagePath = "src/" + packageTextField.getText().replace('.', '/') + '/'; // NOI18N
            generatedFiles[0] = packagePath + serviceNameTextField.getText() + "Impl.java\n"; // NOI18N
            updateCreatedFiles();
        }
        panel.fireChangeEvent(); // Notify that the panel changed
    }
    
}
