/**
 * ************************************************************
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 ************************************************************
 */
package org.openoffice.extensions.projecttemplates.unoclientapplication;

import java.io.File;
import java.io.FilenameFilter;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openoffice.extensions.config.ConfigurationSettings;
import org.openoffice.extensions.projecttemplates.actions.ProjectVersion;

public class UNOClientAppPanelVisual extends JPanel implements DocumentListener {

    public static final String PROP_PROJECT_NAME = "ProjectName"; // NOI18N
    public static final String PROP_CLASS_NAME = "ClassName"; // NOI18N

    private boolean classNameModified = false;
    private UNOClientAppWizardPanel panel;

    /**
     * Creates new form PanelProjectLocationVisual
     */
    public UNOClientAppPanelVisual(UNOClientAppWizardPanel panel) {
        initComponents();
        this.panel = panel;
        // Register listener on the textFields to make the automatic updates
        projectNameTextField.getDocument().addDocumentListener(this);
        projectClassNameTextField.getDocument().addDocumentListener(this);
        projectLocationTextField.getDocument().addDocumentListener(this);
        projectPackageTextField.getDocument().addDocumentListener(this);
    }

    public String getProjectName() {
        return this.projectNameTextField.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectNameLabel = new javax.swing.JLabel();
        projectNameTextField = new javax.swing.JTextField();
        projectLocationLabel = new javax.swing.JLabel();
        projectLocationTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        createdFolderLabel = new javax.swing.JLabel();
        createdFolderTextField = new javax.swing.JTextField();
        projectPackageLabel = new javax.swing.JLabel();
        projectPackageTextField = new javax.swing.JTextField();
        projectClassNameLable = new javax.swing.JLabel();
        projectClassNameTextField = new javax.swing.JTextField();

        projectNameLabel.setLabelFor(projectNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, NbBundle.getMessage(UNOClientAppPanelVisual.class, "LBL_ProjectName")); // NOI18N

        projectNameTextField.setToolTipText(NbBundle.getMessage(UNOClientAppPanelVisual.class, "TF_ClassName_Tooltip")); // NOI18N

        projectLocationLabel.setLabelFor(projectLocationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectLocationLabel, NbBundle.getMessage(UNOClientAppPanelVisual.class, "LBL_ProjectLocation")); // NOI18N

        projectLocationTextField.setToolTipText(NbBundle.getMessage(UNOClientAppPanelVisual.class, "TF_ProjectFolder_Tooltip")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, NbBundle.getMessage(UNOClientAppPanelVisual.class, "LBL_BrowseButton")); // NOI18N
        browseButton.setToolTipText(NbBundle.getMessage(UNOClientAppPanelVisual.class, "BUTTON_Browse_Tooltip")); // NOI18N
        browseButton.setActionCommand("BROWSE");
        browseButton.setName("browse"); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        createdFolderLabel.setLabelFor(createdFolderTextField);
        org.openide.awt.Mnemonics.setLocalizedText(createdFolderLabel, NbBundle.getMessage(UNOClientAppPanelVisual.class, "LBL_ProjectFolder")); // NOI18N

        createdFolderTextField.setEditable(false);
        createdFolderTextField.setToolTipText(NbBundle.getMessage(UNOClientAppPanelVisual.class, "TF_ProjectFolder_Tooltip")); // NOI18N

        projectPackageLabel.setLabelFor(projectPackageTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectPackageLabel, NbBundle.getMessage(UNOClientAppPanelVisual.class, "LBL_JavaPackage")); // NOI18N

        projectPackageTextField.setToolTipText(NbBundle.getMessage(UNOClientAppPanelVisual.class, "TF_JavaPackage_Tooltip")); // NOI18N

        projectClassNameLable.setLabelFor(projectClassNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectClassNameLable, NbBundle.getMessage(UNOClientAppPanelVisual.class, "LBL_ClassName")); // NOI18N

        projectClassNameTextField.setToolTipText(NbBundle.getMessage(UNOClientAppPanelVisual.class, "TF_JavaPackage_Tooltip")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projectLocationLabel)
                    .addComponent(projectNameLabel)
                    .addComponent(projectClassNameLable)
                    .addComponent(projectPackageLabel)
                    .addComponent(createdFolderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projectNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                    .addComponent(projectClassNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                    .addComponent(projectPackageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                    .addComponent(createdFolderTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                    .addComponent(projectLocationTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLabel)
                    .addComponent(projectNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectClassNameLable)
                    .addComponent(projectClassNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectPackageLabel)
                    .addComponent(projectPackageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectLocationLabel)
                    .addComponent(projectLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createdFolderLabel)
                    .addComponent(createdFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(165, 165, 165))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        String command = evt.getActionCommand();
        if ("BROWSE".equals(command)) { // NOI18N
            JFileChooser chooser = new JFileChooser(FileSystemView.getFileSystemView());
            FileUtil.preventFileChooserSymlinkTraversal(chooser, ConfigurationSettings.getDefaultFileChooserStartingDir());
            chooser.setDialogTitle(
                    NbBundle.getMessage(UNOClientAppPanelVisual.class, "LBL_FileChooserTitle"));
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            String path = this.projectLocationTextField.getText();
            if (path.length() > 0) {
                File f = new File(path);
                if (f.exists()) {
                    chooser.setSelectedFile(f);
                }
            }
            if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
                File projectDir = chooser.getSelectedFile();
                ConfigurationSettings.storeDefaultFileChooserStartingDir(projectDir);
                projectLocationTextField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
            }
            panel.fireChangeEvent();
        }

    }//GEN-LAST:event_browseButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel createdFolderLabel;
    private javax.swing.JTextField createdFolderTextField;
    private javax.swing.JLabel projectClassNameLable;
    private javax.swing.JTextField projectClassNameTextField;
    private javax.swing.JLabel projectLocationLabel;
    private javax.swing.JTextField projectLocationTextField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JTextField projectNameTextField;
    private javax.swing.JLabel projectPackageLabel;
    private javax.swing.JTextField projectPackageTextField;
    // End of variables declaration//GEN-END:variables

    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        projectNameTextField.requestFocus();
    }

    boolean valid(WizardDescriptor wizardDescriptor) {

        if (!panel.getUNOClientAppWizardIterator().isSdkOk()) {
            String message = NbBundle.getMessage(UNOClientAppWizardIterator.class, "LBL_ErrorMessageOfficeSdk");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false; // Office or SDK skipped during Configuration Panel
        }

        if (projectNameTextField.getText().length() == 0) {
            String message = NbBundle.getMessage(UNOClientAppWizardIterator.class, "LB_Error_ProjectName");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false; // Display name not specified
        }
        File f = FileUtil.normalizeFile(new File(projectLocationTextField.getText()).getAbsoluteFile());
        if (!f.isDirectory()) {
            String message = NbBundle.getMessage(UNOClientAppWizardIterator.class, "LB_Error_ProjectPath");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }
        final File destFolder = FileUtil.normalizeFile(new File(createdFolderTextField.getText()).getAbsoluteFile());

        File projLoc = destFolder;
        while (projLoc != null && !projLoc.exists()) {
            projLoc = projLoc.getParentFile();
        }
        if (projLoc == null || !projLoc.canWrite()) {
            String message = NbBundle.getMessage(UNOClientAppWizardIterator.class, "LB_Error_ProjectFolder");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }

        if (FileUtil.toFileObject(projLoc) == null) {
            String message = NbBundle.getMessage(UNOClientAppWizardIterator.class, "LB_Error_ProjectPath");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }

        File[] kids = destFolder.listFiles();
        if (destFolder.exists() && kids != null && kids.length > 0) {
            // Folder exists and is not empty
            String message = NbBundle.getMessage(UNOClientAppWizardIterator.class, "LB_Error_ProjectFolderNotEmpty");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false;
        }

        String mainClass = projectClassNameTextField.getText().trim();
        if (mainClass.length() == 0 || !mainClass.matches("[a-zA-Z_][a-zA-Z_$0-9]*")) { // NOI18N
            String message = NbBundle.getMessage(UNOClientAppWizardIterator.class, "LB_Error_ClassName");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false; // Display name not specified
        }
        String packageName = projectPackageTextField.getText().trim();
        if (packageName.length() == 0 || !packageName.matches("[a-zA-Z_]((\\.[a-zA-Z_0-9]++)|[a-zA-Z_0-9])*")) { // NOI18N
            String message = NbBundle.getMessage(UNOClientAppWizardIterator.class, "LB_Error_Package");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message); // NOI18N
            return false; // Display name not specified
        }
        wizardDescriptor.putProperty("WizardPanel_errorMessage", ""); // NOI18N
        return true;
    }

    void store(WizardDescriptor d) {
        String name = projectNameTextField.getText().trim();
        String folder = createdFolderTextField.getText().trim();

        ConfigurationSettings settings = ConfigurationSettings.getSettings();

        String user = System.getProperty("user.name"); // NOI18N
        if (user == null) {
            user = "SomeBody"; // NOI18N
        }

        d.putProperty("UserName", settings.getUser()); // NOI18N
        d.putProperty("BuildUnoVersion", ProjectVersion.getProjectVersion()); // NOI18N
        d.putProperty("TimeStamp", ConfigurationSettings.getTimeStamp()); // NOI18N
        try {
            d.putProperty("OfficeLibrary", settings.getLibraryName()); // NOI18N
        } catch (java.lang.NullPointerException npe) {
            System.err.println("Caught NullPointerException: " + npe.getMessage());
        }
        d.putProperty("OfficePath", Utilities.replaceString(settings.getValue(settings.KEY_OFFICE_INSTALLATION), "\\", "/")); // NOI18N
        d.putProperty("SdkPath", Utilities.replaceString(settings.getValue(settings.KEY_SDK_INSTALLATION), "\\", "/")); // NOI18N
        d.putProperty("projdir", new File(folder)); // NOI18N
        d.putProperty("ProjectDir", new File(folder)); // NOI18N
        d.putProperty("UnoClientProjectName", name); // NOI18N
        d.putProperty("name", name); // NOI18N
        d.putProperty("ProjectDisplayName", name); // NOI18N
        d.putProperty("UnoPackage", projectPackageTextField.getText().trim()); // NOI18N
        d.putProperty("UnoPackagePath", Utilities.replaceString(projectPackageTextField.getText().trim(), ".", "/")); // NOI18N
        d.putProperty("UnoClientMain", projectClassNameTextField.getText().trim()); // NOI18N
    }

    void read(WizardDescriptor settings) {
        File projectLocation = null;
        try {
            projectLocation = (File) settings.getProperty("ProjectDir"); // NOI18N
        } catch (java.lang.ClassCastException cce) {
            System.out.println("Caught ClassCastException " + cce);
        }
        if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile().isDirectory()) {
            projectLocation = ProjectChooser.getProjectsFolder();
        } else {
            projectLocation = projectLocation.getParentFile();
        }
        this.projectLocationTextField.setText(projectLocation.getAbsolutePath());

        String projectName = (String) settings.getProperty("ProjectDisplayName"); // NOI18N
        if (projectName == null) {
            projectName = "OfficeUNOClientApp"; // NOI18N
            String[] fileList = projectLocation.list(new FilenameFilter() {
                public boolean accept(File dir, String name) {
                    if (name.startsWith("OfficeUNOClientApp")) {
                        return true; // NOI18N
                    }
                    return false;
                }
            });
            boolean searchProjectName = true;
            int length = projectName.length();
            for (int i = 0; searchProjectName && i < fileList.length + 1; i++) {
                switch (i) {
                    case 0: // keep project name
                        break;
                    case 1: // append 1
                        projectName = new StringBuffer(projectName).append(1).toString();
                        break;
                    default: // remove number and append the next one
                        projectName = new StringBuffer(projectName.substring(0, length)).append(i).toString();
                }
                // test if the name is already used
                searchProjectName = false;
                for (int j = 0; !searchProjectName && j < fileList.length; j++) {
                    // if the project name isn't found, searchProjectName stays false and the name is kept
                    searchProjectName |= fileList[j].equals(projectName);
                }
            }
        }

        String mainClassName = (String) settings.getProperty("UnoClientMain"); // NOI18N
        if (mainClassName == null) {
            mainClassName = projectName;
        }

        String pkg = (String) settings.getProperty("UnoPackage"); // NOI18N
        if (pkg == null) {
            pkg = NbBundle.getMessage(ConfigurationSettings.class, "default.package"); // NOI18N
        }
        this.projectPackageTextField.setText(pkg);
        this.projectNameTextField.setText(projectName);
        this.projectNameTextField.selectAll();
        this.projectClassNameTextField.setText(mainClassName);
        this.projectPackageTextField.setText(pkg);
    }

    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }

    // Implementation of DocumentListener --------------------------------------
    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
        }
        if (this.projectClassNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_CLASS_NAME, null, this.projectClassNameTextField.getText());
        }
    }

    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
        }
        if (this.projectClassNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_CLASS_NAME, null, this.projectClassNameTextField.getText());
        }
    }

    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
        }
        if (this.projectClassNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_CLASS_NAME, null, this.projectClassNameTextField.getText());
        }
    }

    /**
     * Handles changes in the Project name and project directory,
     */
    private void updateTexts(DocumentEvent e) {

        Document doc = e.getDocument();

        if (doc == projectClassNameTextField.getDocument() && projectClassNameTextField.getText().length() > 0) {
            if (!projectNameTextField.getText().equals(projectClassNameTextField.getText())) {
                classNameModified = true;
            }
        }

        if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {
            // Change in the project name

            String projectName = projectNameTextField.getText();
            String projectFolder = projectLocationTextField.getText();

            if (!classNameModified) {
                projectClassNameTextField.setText(projectName);
            }

            //if (projectFolder.trim().length() == 0 || projectFolder.equals(oldName)) {
            createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);
            //}

        }
        panel.fireChangeEvent(); // Notify that the panel changed
    }

}
