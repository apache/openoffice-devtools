/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/
package org.openoffice.extensions.projecttemplates.actions.panel;

import java.util.StringTokenizer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.openide.util.HelpCtx;

/**
 *
 * @author  sg128468
 */
public class VersionPanel extends javax.swing.JPanel implements DocumentListener, HelpCtx.Provider {
    
    private static final String OPEN_OFFICE_NAME = "Apache OpenOffice "; // NOI18N
    
    private DataHandler m_Handler;
//    private FileObject m_projDir;

    /** Creates new form VersionPanel */
    public VersionPanel(DataHandler handler) {
        m_Handler = handler;
//        m_projDir = projDir;
        initComponents();
        loadData();
        jTextFieldVersion.getDocument().addDocumentListener(this);
        jTextFieldIdentifier.getDocument().addDocumentListener(this);
        jTextFieldDepValue.getDocument().addDocumentListener(this);
        jEditorPaneUpdateURL.getDocument().addDocumentListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jIdentifierLabel = new javax.swing.JLabel();
        jVersionLabel = new javax.swing.JLabel();
        jDepValue = new javax.swing.JLabel();
        jDepName = new javax.swing.JLabel();
        jUpdate = new javax.swing.JLabel();
        jTextFieldIdentifier = new javax.swing.JTextField();
        jTextFieldVersion = new javax.swing.JTextField();
        jTextFieldDepValue = new javax.swing.JTextField();
        jTextFieldDepName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPaneUpdateURL = new javax.swing.JEditorPane();
        jErrorLabel = new javax.swing.JLabel();

        jIdentifierLabel.setLabelFor(jTextFieldIdentifier);
        org.openide.awt.Mnemonics.setLocalizedText(jIdentifierLabel, org.openide.util.NbBundle.getMessage(VersionPanel.class, "VersionPanel.jIdentifierLabel.text")); // NOI18N

        jVersionLabel.setLabelFor(jTextFieldVersion);
        org.openide.awt.Mnemonics.setLocalizedText(jVersionLabel, org.openide.util.NbBundle.getMessage(VersionPanel.class, "VersionPanel.jVersionLabel.text")); // NOI18N

        jDepValue.setLabelFor(jTextFieldDepValue);
        org.openide.awt.Mnemonics.setLocalizedText(jDepValue, org.openide.util.NbBundle.getMessage(VersionPanel.class, "VersionPanel.jDepValue.text")); // NOI18N

        jDepName.setLabelFor(jTextFieldDepName);
        jDepName.setText(org.openide.util.NbBundle.getMessage(VersionPanel.class, "VersionPanel.jDepName.text")); // NOI18N

        jUpdate.setLabelFor(jEditorPaneUpdateURL);
        org.openide.awt.Mnemonics.setLocalizedText(jUpdate, org.openide.util.NbBundle.getMessage(VersionPanel.class, "VersionPanel.jUpdate.text")); // NOI18N

        jTextFieldDepName.setEditable(false);

        jScrollPane1.setViewportView(jEditorPaneUpdateURL);

        jErrorLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDepName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDepValue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jVersionLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jIdentifierLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jTextFieldDepName)
                    .addComponent(jTextFieldDepValue)
                    .addComponent(jTextFieldVersion)
                    .addComponent(jTextFieldIdentifier)))
            .addComponent(jErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jIdentifierLabel)
                    .addComponent(jTextFieldIdentifier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jVersionLabel)
                    .addComponent(jTextFieldVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDepValue)
                    .addComponent(jTextFieldDepValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDepName)
                    .addComponent(jTextFieldDepName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jUpdate)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(jErrorLabel))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jDepName;
    private javax.swing.JLabel jDepValue;
    private javax.swing.JEditorPane jEditorPaneUpdateURL;
    private javax.swing.JLabel jErrorLabel;
    private javax.swing.JLabel jIdentifierLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldDepName;
    private javax.swing.JTextField jTextFieldDepValue;
    private javax.swing.JTextField jTextFieldIdentifier;
    private javax.swing.JTextField jTextFieldVersion;
    private javax.swing.JLabel jUpdate;
    private javax.swing.JLabel jVersionLabel;
    // End of variables declaration//GEN-END:variables

    
    
    /**
     * Initial data in fields
     */
    private void loadData() {
        String extensionID = m_Handler.getIdentifier();
        if (extensionID != null) {
            jTextFieldIdentifier.setText(extensionID);
        }
        
        String versionNumber = m_Handler.getVersion();
        if (versionNumber != null) {
            jTextFieldVersion.setText(versionNumber);
        }
        
        String depName = m_Handler.getDependencyName();
        if (depName != null) {
            jTextFieldDepName.setText(depName);
        }
        
        String depValue = m_Handler.getDependencyNumber();
        if (depValue != null) {
            jTextFieldDepValue.setText(depValue);
        }
        
        String[] updateURLs = m_Handler.getUpdateURLs();
        if (updateURLs != null && updateURLs.length > 0) {
            String string = "";
            for (int i = 0; i < updateURLs.length; i++) {
                string = string.concat(updateURLs[i]).concat("\n"); // NOI18N
            }
            jEditorPaneUpdateURL.setText(string);
        }
    }

    public HelpCtx getHelpCtx() {
        return new HelpCtx("org.openoffice.extensions.actions.version.properties");
    }
    
    /**
     * Update the texts and settings for this panel
     * @param document The document of the field that has been changed
     */
    private void updateTexts(Document document) {
        if (document.equals(jTextFieldVersion.getDocument())) {
            String version = jTextFieldVersion.getText();
            m_Handler.setVersion(version);
        }
        if (document.equals(jTextFieldIdentifier.getDocument())) {
            String identifier = jTextFieldIdentifier.getText();
            m_Handler.setIdentifier(identifier);
        }
        if (document.equals(jTextFieldDepValue.getDocument())) {
            String depValue = jTextFieldDepValue.getText();
            String depName = OPEN_OFFICE_NAME.concat(depValue);
            m_Handler.setDependencyNumber(depValue);
            m_Handler.setDependencyName(depName);
            jTextFieldDepName.setText(depName);
        }
        if (document.equals(jEditorPaneUpdateURL.getDocument())) {
            String text = jEditorPaneUpdateURL.getText();
            StringTokenizer tk = new StringTokenizer(text, "\n");
            String[] urls = new String[tk.countTokens()];
            int index = 0;
            while (tk.hasMoreTokens()) {
                urls[index++] = tk.nextToken();
            }
            m_Handler.setUpdateURLs(urls);
        }
        VerifyData verifyer = VerifyData.getVerifyer();
        if (!verifyer.verifyData(m_Handler)) {
            String message = verifyer.getErrorMessage();
            jErrorLabel.setText(message);
            jErrorLabel.setIcon(verifyer.getErrorIcon());
        }
        else {
            jErrorLabel.setText("");
            jErrorLabel.setIcon(null);
        }

    }

    public void insertUpdate(DocumentEvent e) {
        updateTexts(e.getDocument());
    }

    public void removeUpdate(DocumentEvent e) {
        updateTexts(e.getDocument());
    }

    public void changedUpdate(DocumentEvent e) {
        updateTexts(e.getDocument());
    }

}
