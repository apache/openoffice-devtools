/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/
package org.openoffice.extensions.projecttemplates.component.datamodel.types.node;

import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.FeatureDescriptor;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.propertysheet.PropertySheet;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openoffice.extensions.projecttemplates.component.ComponentWizardIterator;
import org.openoffice.extensions.util.LogWriter;
import org.openoffice.extensions.util.datamodel.NbNodeObject;
import org.openoffice.extensions.util.datamodel.PolyStruct;
import org.openoffice.extensions.util.datamodel.TemplateType;
import org.openoffice.extensions.util.datamodel.properties.SimpleOpenOfficeOrgProperty;
import org.openoffice.extensions.util.datamodel.properties.UnknownOpenOfficeOrgPropertyException;

/**
 *
 * @author  sg128468
 */
public class NewTemplateTypesDialog extends javax.swing.JPanel 
            implements ExplorerManager.Provider, ActionListener {


    ExplorerManager manager = new ExplorerManager();

    private PolyStruct plStruct;
    private ComponentTypePropertyEditor editor;    
    
    /** Creates new form NewTemplateTypesDialog */
    public NewTemplateTypesDialog(ComponentTypePropertyEditor editor, PolyStruct plStruct) {
        this.editor = editor;
        this.plStruct = plStruct;
        initComponents();
        
        Node node = (Node)IdlTypeTreeCreator.createTemplateNode(plStruct);
            
        manager.setRootContext(node);

        PropertySheet propSheet = (PropertySheet)jPanel1;
        propSheet.setNodes(new Node[]{node});
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new PropertySheet();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void performOK() {
        StringBuffer result = new StringBuffer();
        // write the information from this copy back to the editor
        Node[] nodes = manager.getRootContext().getChildren().getNodes();
        try {
            String structName = plStruct.getSimpleProperty(plStruct.PROPERTY_CONTAINER_PACKAGE).concat(
                    ".").concat(plStruct.getSimpleProperty(plStruct.PROPERTY_CONTAINER_NAME)); // NOI18N
            result.append(structName).append("< "); // NOI18N
        } catch (UnknownOpenOfficeOrgPropertyException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }
        for (int i=0; i<nodes.length; i++) {
            NbNodeObject nodeObject = (NbNodeObject)
            nodes[i].getLookup().lookup(NbNodeObject.class);
            if (nodeObject instanceof TemplateType) {
                TemplateType templType = (TemplateType)nodeObject;
                try {
                    String type = templType.getSimpleProperty(templType.PROPERTY_CONTAINER_TYPE);
                    if (i != 0) {
                        result.append(","); // NOI18N
                    }
                    result.append(type);
                } catch (UnknownOpenOfficeOrgPropertyException ex) {
                    LogWriter.getLogWriter().printStackTrace(ex);
                }
                
            }
        }
        result.append(" >"); // NOI18N
        FeatureDescriptor desc = editor.getPropertyEnv().getFeatureDescriptor();
        SimpleOpenOfficeOrgProperty.SimpleProperty prop = (SimpleOpenOfficeOrgProperty.SimpleProperty)desc;
        editor.setAsText(result.toString());
        prop.setValue(result.toString());
    }
    
    /**
     */
    public static void start(final ComponentTypePropertyEditor editor,
            final PolyStruct plStruct) {
        NewTemplateTypesDialog templTypes = new NewTemplateTypesDialog(editor, plStruct);
        DialogDescriptor ddscr = new DialogDescriptor(templTypes, 
                NbBundle.getMessage(ComponentWizardIterator.class, "LBL_TemplateTypes_Title"));
        
        ddscr.setButtonListener(templTypes);
        
        Dialog d = DialogDisplayer.getDefault().createDialog(ddscr);
        d.setVisible(true);
    }

    public ExplorerManager getExplorerManager() {
        return manager;
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("OK")) { // NOI18N
            performOK();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

}
