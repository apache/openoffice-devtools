Templates/Project/org-openoffice-extensions/ComponentProject=Apache OpenOffice Component

#ComponentPanel1
LBL_ProjectName=Project &Name:
LBL_ServiceName=&Class Name:
LBL_Package=&Package:
LBL_ProjectLocation=Project &Location:
LBL_ProjectFolder=Project &Folder:
LBL_CreatedFiles=Created Files:
LBL_ButtonBrowse=Br&owse...
CB_Backward_Compatibility=Create &backward compatible Component
LBL_FileChooser_Title=Select Project Location
LBL_Error_ProjectNameNotValid=Project Name is not a valid folder name.
LBL_Error_ProjectFolderNotValid=Project Folder is not a valid path.
LBL_Error_CreateProjectFolderNot=Project Folder cannot be created.
LBL_Error_ProjectFolderNotEmpty=Project Folder already exists and is not empty.
LBL_Error_MandatoryService=There has to be at least one implemented service with at least one valid interface.

# tooltips
TF_ProjectName_Tooltip=The name of the newly created project (also used as project folder name)
TF_ClassName_Tooltip=The name of the main implementation class
TF_PackageName_Tooltip=The Java package name
TF_ProjectLocation_Tooltip=The path to the directory where the project will be created
TF_ProjectFolder_Tooltip=The final destination folder of the new project
BUTTON_Browse_Tooltip=Select a folder where the project will be created

#NewTypeBrowserDialog
LBL_TypeBrowser_Title=Select a new Data type

#NewTemplateTypes
LBL_TemplateTypes_Title=Select a Template type

#EnumDataTypeDialog
LBL_Button_AddEnum=&Add Enum
LBL_ButtonDelete=&Delete

#StructDataTypeDialog
LBL_Button_AddType=&Add Type

#ComponentPanel2
LBL_CreateProjectStep=Name and Location
LBL_IdlFiles=Define Service
LBL_ButtonAddType=&Add Service/Interface...
LBL_ServicesAndInterfaces=Implemented Services/Interfaces
LBL_OwnDataTypes=Own Defined Data Types
LBL_ButtonDeleteSelected=&Delete Selected
LBL_ButtonDeleteSelected2=Delete &Selected
LBL_ButtonDefineType=Define &New Data Type...
LBL_ButtonEdit=&Edit...
LBL_Show=Display Type
#tooltips
Button_AddServiceInterface_Tooltip=Add a new service or interface to the implementation
Button_DeleteServiceInterface_Tooltip=Delete the selected service or interface (only from the implementation)
Button_DefineDataType_Tooltip=Define a new data type
Button_DeletDataType_Tooltip=Delete the selected own designed data type
Button_EditDataType_Tooltip=Edit the selelected data type

#ComponentCustomTypeEditor
LBL_DisplayType=Display &Type
LST_TypeList=All Interfaces Structs
LBL_optionalCheckBox=&optional
LBL_ambiguousCheckBox=&ambiguous
LBL_defaultedCheckBox=&defaulted

#ComponentRootNode
LBL_Implement=Implement

LBL_DataType=

LBL_ButtonNewFunction=

# templates
# NOI18N
InterfaceTemplate=\
/*\
\n * $!XMultiInheritanceInterface!.idl\
\n *\
\n * Created on $!TimeStamp!\
\n *\
\n */\
\n$!CR!#ifndef __$!PackageNameUnderscore!_$!XMultiInheritanceInterface!__\
\n#define __$!PackageNameUnderscore!_$!XMultiInheritanceInterface!__\
\n$!Import!\
\n$!PackageNameModule!\
\n    interface $!XMultiInheritanceInterface! {\n\
\n        $!Import2!\
\n        $!Methods!\
\n    };\
\n$!CloseModule!\
\n$!CR!#endif

# a template for idl services
# NOI18N
ServiceTemplate=\
/*\
\n * $!Service!.idl\
\n *\
\n * Created on $!TimeStamp!\
\n *\
\n */\
\n$!CR!#ifndef __$!PackageNameUnderscore!_$!Service!__\
\n#define __$!PackageNameUnderscore!_$!Service!__\
\n$!Import!\
\n$!CR!$!PackageNameModule!\
\n    service $!Service! : $!XMultiInheritanceInterface!;\
\n$!CloseModule!\
\n$!CR!#endif

# NOI18N
EnumerationTemplate=\
/*\
\n * $!EnumName!.idl\
\n *\
\n * Created on $!TimeStamp!\
\n *\
\n */\
\n$!CR!#ifndef __$!PackageNameUnderscore!_$!EnumName!__\
\n#define __$!PackageNameUnderscore!_$!EnumName!__\
\n$!CR!$!PackageNameModule!\
\n    enum $!EnumName! {\n\
\n        $!Enums!\
\n    };\
\n$!CloseModule!\
\n$!CR!#endif

# NOI18N
StructTemplate=\
/*\
\n * $!StructName!.idl\
\n *\
\n * Created on $!TimeStamp!\
\n *\
\n */\
\n$!CR!#ifndef __$!PackageNameUnderscore!_$!StructName!__\
\n#define __$!PackageNameUnderscore!_$!StructName!__\
\n$!CR!$!PackageNameModule!\
\n    struct $!StructName! {\n\
\n        $!Structs!\
\n    };\
\n$!CloseModule!\
\n$!CR!#endif

# NOI18N
PolyStructTemplate=\
/*\
\n * $!PolyStructName!.idl\
\n *\
\n * Created on $!TimeStamp!\
\n *\
\n */\
\n$!CR!#ifndef __$!PackageNameUnderscore!_$!PolyStructName!__\
\n#define __$!PackageNameUnderscore!_$!PolyStructName!__\
\n$!Import!\
\n$!CR!$!PackageNameModule!\
\n    struct $!PolyStructNameTemplate! {\n\
\n        $!Templates!\
\n        $!Properties!\
\n    };\
\n$!CloseModule!\
\n$!CR!#endif

# NOI18N
ExceptionTemplate=\
/*\
\n * $!ExceptionName!.idl\
\n *\
\n * Created on $!TimeStamp!\
\n *\
\n */\
\n$!CR!#ifndef __$!PackageNameUnderscore!_$!ExceptionName!__\
\n#define __$!PackageNameUnderscore!_$!ExceptionName!__\
\n$!Import!\
\n$!CR!$!PackageNameModule!\
\n    exception $!ExceptionName! :\
\n        $!ParentExceptionName!\
\n    {\
\n    };\
\n$!CloseModule!\
\n$!CR!#endif


