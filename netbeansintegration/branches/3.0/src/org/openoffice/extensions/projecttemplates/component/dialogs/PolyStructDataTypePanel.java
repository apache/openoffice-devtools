/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

package org.openoffice.extensions.projecttemplates.component.dialogs;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.MissingResourceException;
import javax.swing.JPanel;
import javax.swing.tree.TreeSelectionModel;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.propertysheet.PropertySheet;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openoffice.extensions.projecttemplates.component.*;
import org.openoffice.extensions.projecttemplates.component.datamodel.types.node.IdlTypeTreeCreator;
import org.openoffice.extensions.util.LogWriter;
import org.openoffice.extensions.util.datamodel.NbNodeObject;
import org.openoffice.extensions.util.datamodel.Parameter;
import org.openoffice.extensions.util.datamodel.PolyStruct;
import org.openoffice.extensions.util.datamodel.TemplateType;
import org.openoffice.extensions.util.datamodel.properties.UnknownOpenOfficeOrgPropertyException;

/**
 *
 * @author  sg128468
 */
public class PolyStructDataTypePanel extends JPanel
        implements ExplorerManager.Provider, PropertyChangeListener {
    
    private ExplorerManager manager = new ExplorerManager();
    private PropertySheet propSheet;
    private ChangeEventPanel panel;
    private ValidateDataType dialog;
    private Node node;
    
    private String oldName; 
    private boolean edit;
    private ComponentActions actions;
    
    /**
     * Creates new Poly Struct panel
     */
    public PolyStructDataTypePanel(ValidateDataType dialog, DialogProperties props) {
        initComponents();

        this.edit = props.getBooleanProperty(props.EDIT);
        String pkgName = props.getStringProperty(props.PKG);
        String name = props.getStringProperty(props.NAME);
        
        panel = (ChangeEventPanel)props.getProperty(props.PANEL);
        this.actions = new ComponentActions(manager, panel);
        this.dialog = dialog;
        
        if (edit) {
            node = (Node)props.getProperty(props.NODE);
            NbNodeObject ob = (NbNodeObject)node.getLookup().lookup(NbNodeObject.class);
            oldName = ob.getDisplayName();
        }
        else {
            if (name == null) name = "PolyStruct"; // NOI18N
            node = (Node)IdlTypeTreeCreator.createInitialPolyStruct(name, pkgName);
        }
        manager.setRootContext(node);

        manager.addPropertyChangeListener(this);
        
        propSheet = (PropertySheet)jPanel1;
        propSheet.setNodes(new Node[]{node});

        BeanTreeView componentView = (BeanTreeView)jScrollPane1;
        componentView.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new PropertySheet();
        jScrollPane1 = new BeanTreeView();
        addTemplateButton = new javax.swing.JButton();
        addPropertyButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setRightComponent(jPanel1);
        jSplitPane1.setLeftComponent(jScrollPane1);

        org.openide.awt.Mnemonics.setLocalizedText(addTemplateButton, org.openide.util.NbBundle.getBundle(NewDataTypeBasePanel.class).getString("LBL_Button_AddTemplate")); // NOI18N
        addTemplateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTemplateButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addPropertyButton, org.openide.util.NbBundle.getBundle(NewDataTypeBasePanel.class).getString("LBL_Button_AddMember")); // NOI18N
        addPropertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPropertyButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(deleteButton, org.openide.util.NbBundle.getBundle(NewDataTypeBasePanel.class).getString("LBL_Button_Delete")); // NOI18N
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(addTemplateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addPropertyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(addTemplateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPropertyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addGap(182, 182, 182))
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        Node[] nodes = manager.getSelectedNodes();
        if (nodes != null && nodes.length == 1) {
            Node node = nodes[0];
            NbNodeObject nodeObject = (NbNodeObject)node.getLookup().lookup(NbNodeObject.class);
            PolyStruct parent = (PolyStruct)nodeObject.getParent();
            switch(nodeObject.getType()) {
                case NbNodeObject.PARAMETER_TYPE:
                    parent.removePropertyType((Parameter)nodeObject);
                    break;
                case NbNodeObject.TEMPLATE_TYPE:
                    parent.removeTemplateType((TemplateType)nodeObject);
                    break;
                default:
                    // do nothing
            }
            this.actions.updateUI(node.getParentNode());
        }
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addPropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPropertyButtonActionPerformed

        Node[] nodes = manager.getSelectedNodes();
        if (nodes != null && nodes.length == 1) {
            Node node = nodes[0];
            NbNodeObject nodeObject = (NbNodeObject)node.getLookup().lookup(NbNodeObject.class);
            Object parent = nodeObject.getParent();
            if (parent != null) {
                ((PolyStruct)parent).addPropertyType(nodeObject);
                this.actions.updateUI(node.getParentNode());
            }
            else {
                ((PolyStruct)nodeObject).addPropertyType();
                this.actions.updateUI(node);
            }
        }
        
    }//GEN-LAST:event_addPropertyButtonActionPerformed

    private void addTemplateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTemplateButtonActionPerformed

        Node[] nodes = manager.getSelectedNodes();
        if (nodes != null && nodes.length == 1) {
            Node node = nodes[0];
            NbNodeObject nodeObject = (NbNodeObject)node.getLookup().lookup(NbNodeObject.class);
            Object parent = nodeObject.getParent();
            if (parent != null) {
                ((PolyStruct)parent).addTemplateType(nodeObject);
                this.actions.updateUI(node.getParentNode());
            }
            else {
                ((PolyStruct)nodeObject).addTemplateType();
                this.actions.updateUI(node);
            }
        }
        
        
    }//GEN-LAST:event_addTemplateButtonActionPerformed
    
    public ExplorerManager getExplorerManager() {
        return this.manager;
    }

    public void propertyChange(PropertyChangeEvent evt) {
        Node[] nodes = manager.getSelectedNodes();
        if (nodes != null && nodes.length == 1) {
            propSheet.setNodes(nodes);
            NbNodeObject nodeObject = (NbNodeObject)nodes[0].getLookup().lookup(NbNodeObject.class);
            if (nodeObject.getType() == NbNodeObject.PROPERTY_TYPE){
                deleteButton.setEnabled(false);
                addPropertyButton.setEnabled(false);
                addTemplateButton.setEnabled(false);
            }
            else if (nodeObject.getType() == NbNodeObject.TEMPLATE_TYPE) {
                deleteButton.setEnabled(true);
                addPropertyButton.setEnabled(false);
                addTemplateButton.setEnabled(true);
            }
            else if (nodeObject.getType() == NbNodeObject.PARAMETER_TYPE) {
                deleteButton.setEnabled(true);
                addPropertyButton.setEnabled(true);
                addTemplateButton.setEnabled(false);
            }
            else {
                deleteButton.setEnabled(false);
                addPropertyButton.setEnabled(true);
                addTemplateButton.setEnabled(true);
            }
        }
        valid();
//        panel.fireChangeEvent(); // Notify that the panel changed
    }
    
    private void valid() {
        NbNodeObject ob = (NbNodeObject)node.getLookup().lookup(NbNodeObject.class);
        PolyStruct struct = (PolyStruct)ob;
        try {
            if (struct.getSimpleProperty(struct.PROPERTY_CONTAINER_NAME).length() == 0 ||
                struct.getSimpleProperty(struct.PROPERTY_CONTAINER_PACKAGE).length() == 0) {
                dialog.setEnableError(true, 
                    NbBundle.getMessage(NewDataTypeBasePanel.class, "LBL_Error_Name"));
                return;
            }
            else if (struct.getTemplateTypeNames().length == 0) {
                dialog.setEnableError(true, 
                    NbBundle.getMessage(NewDataTypeBasePanel.class, "LBL_Error_Template"));
                return;
            }
        } catch (MissingResourceException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        } catch (UnknownOpenOfficeOrgPropertyException ex) {
            LogWriter.getLogWriter().printStackTrace(ex);
        }
        dialog.setEnableError(false, null);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPropertyButton;
    private javax.swing.JButton addTemplateButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables

}
