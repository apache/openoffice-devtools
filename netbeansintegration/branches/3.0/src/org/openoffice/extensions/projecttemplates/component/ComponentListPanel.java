/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

package org.openoffice.extensions.projecttemplates.component;

import java.beans.PropertyVetoException;
import javax.swing.ActionMap;
import javax.swing.tree.TreeSelectionModel;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openoffice.extensions.projecttemplates.component.datamodel.DataType;
import org.openoffice.extensions.projecttemplates.component.datamodel.node.DataTypeNode;
import org.openoffice.extensions.util.LogWriter;

/**
 *
 * @author  sg128468
 */
public class ComponentListPanel extends javax.swing.JPanel 
        implements ExplorerManager.Provider, Lookup.Provider {//, PropertyChangeListener  {

    private ExplorerManager manager = new ExplorerManager();
    private Lookup lookup;
    private ComponentWizardPanel2IdlFiles panel;
    
    /** Creates new form ComponentListPanel */
    public ComponentListPanel(ComponentWizardPanel2IdlFiles panel, Node rootNode) {
        initComponents();
        this.panel = panel;
        manager.setRootContext(rootNode);

        BeanTreeView componentView = (BeanTreeView)jScrollPane1;
        componentView.setRootVisible(false);
        componentView.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        ActionMap map = getActionMap();
        
//        manager.addPropertyChangeListener(this);
        lookup = ExplorerUtils.createLookup(manager, map); 
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new BeanTreeView();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

        add(jScrollPane1);

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public ExplorerManager getExplorerManager() {
        return this.manager;
    }
    
    public Lookup getLookup() {
        return lookup;
    }

/*    public void propertyChange(PropertyChangeEvent evt) {
        panel.fireChangeEvent();
    } */
    
    public void selectNode(Node node) {
        if (node != null) {
            try {
                manager.setSelectedNodes(new Node[]{node});
            } catch (PropertyVetoException ex) {
                LogWriter.getLogWriter().printStackTrace(ex);
            }
        }
    }

    public String getSelectedType() {
        Node[] selNodes = manager.getSelectedNodes();
        String displayName = null;
        if (selNodes != null && selNodes.length > 0) {
            Node selNode = (DataTypeNode)selNodes[0];  // single tree selection
            while (selNode.getParentNode() != null) {
                displayName = selNode.getDisplayName();
                selNode = selNode.getParentNode();
            }
        }
        return displayName == null?DataType.INTERFACE_TYPE_NAME:displayName;  // use interface as fallback if nothig else helps
    }
}
